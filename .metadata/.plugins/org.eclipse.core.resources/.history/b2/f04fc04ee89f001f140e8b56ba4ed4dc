/*
 * fsm_automatic.c
 *
 *  Created on: Nov 11, 2024
 *      Author: Ngo Truc Linh
 */
#include "fsm_automatic.h"
#include "traffic.h"
#include "global.h"
#include "main.h"

void auto_run_traffic_light(){

	switch (status_row) {
		case RED_ROW:
			setRedLightInRow();
			count_red_row[1]--;
			if(count_red_row[1] < 0){
				count_red_row[0]--;
				count_red_row[1] = 9;
			}
			led_buffer[0] = count_red_row[0];
			led_buffer[1] = count_red_row[1];
			if(count_red_row[0] <= 0 && count_red_row[1] <= 0){
				count_red_row[0] = time_red[0];
				count_red_row[1] = time_red[1];
				status_row = GREEN_ROW;
			}
			break;
		case YELLOW_ROW:
			setYellowLightInRow();
			count_yellow_row[1]--;
			if(count_yellow_row[1] < 0){
				count_yellow_row[0]--;
				count_yellow_row[1] = 9;
			}
			led_buffer[0] = count_yellow_row[0];
			led_buffer[1] = count_yellow_row[1];
			if(count_yellow_row[0] <= 0 && count_yellow_row[1] <= 0){
				count_yellow_row[0] = time_yellow[0];
				count_yellow_row[1] = time_yellow[1];
				status_row = RED_ROW;
			}
			break;
		case GREEN_ROW:
			setGreenLightInRow();
			count_green_row[1]--;
			if(count_green_row[1] < 0){
				count_green_row[0]--;
				count_green_row[1] = 9;
			}

			led_buffer[0] = count_green_row[0];
			led_buffer[1] = count_green_row[1];
			if(count_green_row[0] <= 0 && count_green_row[1] <= 0){
				count_green_row[0] = time_green[0];
				count_green_row[1] = time_green[1];
				status_row = YELLOW_ROW;
			}
		default:
			break;
	}
	switch (status_column) {
		case RED_COLUMN:
			setRedLightInColumn();
			count_red_column[1]--;
			if(count_red_column[1] < 0){
				count_red_column[0]--;
				count_red_column[1] = 9;
			}
			led_buffer[2] = count_red_column[0];
			led_buffer[3] = count_red_column[1];
			if(count_red_column[0] <= 0 && count_red_column[1] <= 0){
				count_red_column[0] = time_red[0];
				count_red_column[1] = time_red[1];
				status_column = GREEN_COLUMN;
			}
			break;
		case YELLOW_COLUMN:
			setYellowLightInColumn();
			count_yellow_column[1]--;
			if(count_yellow_column[1] < 0){
				count_yellow_column[0]--;
				count_yellow_column[1] = 9;
			}
			led_buffer[2] = count_yellow_column[0];
			led_buffer[3] = count_yellow_column[1];
			if(count_yellow_column[0] <= 0 && count_yellow_column[1] <= 0){
				count_yellow_column[0] = time_yellow[0];
				count_yellow_column[1] = time_yellow[1];
				status_column = RED_COLUMN;
			}
			break;
		case GREEN_COLUMN:
			setGreenLightInColumn();
			count_green_column[1]--;
			if(count_green_column[1] < 0){
				count_green_column[0]--;
				count_green_column[1] = 9;
			}
			led_buffer[2] = count_green_column[0];
			led_buffer[3] = count_green_column[1];
			if(count_green_column[0] <= 0 && count_green_column[1] <= 0){
				count_green_column[0] = time_green[0];
				count_green_column[1] = time_green[1];
				status_column = YELLOW_COLUMN;
			}
			break;
		default:
			break;
	}
}


