/*
 * command_parser_fsm.h
 *
 *  Created on: Dec 9, 2024
 *      Author: Ngo Truc Linh
 */

#ifndef INC_COMMAND_PARSER_FSM_H_
#define INC_COMMAND_PARSER_FSM_H_
#include "global.h"
void command_parser_fsm(){
    int rst, ok;
    if (index_buffer == 0) {
        ok = MAX_BUFFER_SIZE - 1;
        rst = MAX_BUFFER_SIZE - 1;
    }
    if (index_buffer != 0) {
        ok = index_buffer - 1;
        rst = index_buffer - 1;
    }

    switch (status_rst) {
        case INIT:
            if (buffer[rst] == '!')
                status_rst = RST_INIT;
            break;

        case RST_INIT:
            if (buffer[rst] == '!')
                status_rst = RST_INIT;
            else if (buffer[rst] == 'R')
                status_rst = RST_R;
            else
                status_rst = INIT;
            break;

        case RST_R:
            if (buffer[rst] == 'S')
                status_rst = RST_S;
            else
                status_rst = INIT;
            break;

        case RST_S:
            if (buffer[rst] == 'T')
                status_rst = RST_T;
            else
                status_rst = INIT;
            break;

        case RST_T:
            if (buffer[rst] == '#') {
                status_rst = RST_END;
                status_uart = UART_SEND;
            } else {
                status_rst = INIT;
            }
            break;

        case RST_FINISH:
            if (buffer[rst] == '!')
                status_rst = RST_INIT;
            else
                status_rst = INIT;
            break;

        default:
            break;
    }

    switch (status_ok) {
        case INIT:
            if (buffer[ok] == '!')
                status_ok = OK_INIT;
            break;

        case OK_INIT:
            if (buffer[ok] == '!')
                status_ok = OK_INIT;
            else if (buffer[ok] == 'O')
                status_ok = OK_O;
            else
                status_ok = INIT;
            break;

        case OK_O:
            if (buffer[ok] == 'K')
                status_ok = OK_K;
            else
                status_ok = INIT;
            break;

        case OK_K:
            if (buffer[ok] == '#') {
                status_ok = OK_END;
                status_uart = UART_END;
            } else {
                status_ok = INIT;
            }
            break;

        case OK_END:
            if (buffer[ok] == '!')
                status_ok = OK_INIT;
            else
                status_ok = INIT;
            break;

        default:
            break;
    }
}

void uart_communication_fsm() {
    switch (status_uart) {
        case UART_INIT:
            break;

        case UART_SEND:
            if (timer1_flag == 1) {
                ADC_value = HAL_ADC_GetValue(&hadc1);
                HAL_UART_Transmit(&huart2, (void *)str,
                    sprintf(str, "\r\n!%ld#\r\n", ADC_value), 1000);
                HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
                setTimer1(3000);
            }
            break;

        case UART_END:
            HAL_UART_Transmit(&huart2, (void *)str,
                sprintf(str, "\r\n%s\r\n", "END"), 1000);
            status_uart = UART_INIT;
            break;

        default:
            break;
    }
}


#endif /* INC_COMMAND_PARSER_FSM_H_ */
