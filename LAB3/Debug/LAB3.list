
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002890  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800299c  0800299c  0001299c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029bc  080029bc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080029bc  080029bc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029bc  080029bc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029c0  080029c0  000129c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080029c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000005c  08002a20  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002a20  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097e7  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac1  00000000  00000000  0002986c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002b330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002bda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cfd  00000000  00000000  0002c700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb0d  00000000  00000000  000433fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008224b  00000000  00000000  0004ef0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1155  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d8  00000000  00000000  000d11a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002984 	.word	0x08002984

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002984 	.word	0x08002984

0800014c <getKeyInput>:
int KeyReg2[NUM_OF_BUTTON] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int button_flag[NUM_OF_BUTTON] = {0,0,0};
int buttonBuffer[NUM_OF_BUTTON] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

void getKeyInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_OF_BUTTON; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e08d      	b.n	8000274 <getKeyInput+0x128>
		  KeyReg2[i] = KeyReg1[i];
 8000158:	4a4b      	ldr	r2, [pc, #300]	; (8000288 <getKeyInput+0x13c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	494a      	ldr	r1, [pc, #296]	; (800028c <getKeyInput+0x140>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  KeyReg1[i] = KeyReg0[i];
 8000168:	4a49      	ldr	r2, [pc, #292]	; (8000290 <getKeyInput+0x144>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	4945      	ldr	r1, [pc, #276]	; (8000288 <getKeyInput+0x13c>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  switch (i) {
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b02      	cmp	r3, #2
 800017c:	d01f      	beq.n	80001be <getKeyInput+0x72>
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2b02      	cmp	r3, #2
 8000182:	dc27      	bgt.n	80001d4 <getKeyInput+0x88>
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d003      	beq.n	8000192 <getKeyInput+0x46>
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2b01      	cmp	r3, #1
 800018e:	d00b      	beq.n	80001a8 <getKeyInput+0x5c>
				break;
			case 2:
				  KeyReg0[i] = HAL_GPIO_ReadPin(GPIOB, b3_Pin);
				break;
			default:
				break;
 8000190:	e020      	b.n	80001d4 <getKeyInput+0x88>
				  KeyReg0[i] = HAL_GPIO_ReadPin(GPIOB, b1_Pin);
 8000192:	2101      	movs	r1, #1
 8000194:	483f      	ldr	r0, [pc, #252]	; (8000294 <getKeyInput+0x148>)
 8000196:	f001 fbb5 	bl	8001904 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	4619      	mov	r1, r3
 800019e:	4a3c      	ldr	r2, [pc, #240]	; (8000290 <getKeyInput+0x144>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 80001a6:	e016      	b.n	80001d6 <getKeyInput+0x8a>
				  KeyReg0[i] = HAL_GPIO_ReadPin(GPIOB, b2_Pin);
 80001a8:	2102      	movs	r1, #2
 80001aa:	483a      	ldr	r0, [pc, #232]	; (8000294 <getKeyInput+0x148>)
 80001ac:	f001 fbaa 	bl	8001904 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4619      	mov	r1, r3
 80001b4:	4a36      	ldr	r2, [pc, #216]	; (8000290 <getKeyInput+0x144>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 80001bc:	e00b      	b.n	80001d6 <getKeyInput+0x8a>
				  KeyReg0[i] = HAL_GPIO_ReadPin(GPIOB, b3_Pin);
 80001be:	2104      	movs	r1, #4
 80001c0:	4834      	ldr	r0, [pc, #208]	; (8000294 <getKeyInput+0x148>)
 80001c2:	f001 fb9f 	bl	8001904 <HAL_GPIO_ReadPin>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4619      	mov	r1, r3
 80001ca:	4a31      	ldr	r2, [pc, #196]	; (8000290 <getKeyInput+0x144>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 80001d2:	e000      	b.n	80001d6 <getKeyInput+0x8a>
				break;
 80001d4:	bf00      	nop
		  }
		  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001d6:	4a2c      	ldr	r2, [pc, #176]	; (8000288 <getKeyInput+0x13c>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001de:	492c      	ldr	r1, [pc, #176]	; (8000290 <getKeyInput+0x144>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d141      	bne.n	800026e <getKeyInput+0x122>
 80001ea:	4a27      	ldr	r2, [pc, #156]	; (8000288 <getKeyInput+0x13c>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f2:	4926      	ldr	r1, [pc, #152]	; (800028c <getKeyInput+0x140>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d137      	bne.n	800026e <getKeyInput+0x122>
			  if(buttonBuffer[i] != KeyReg2[i]){
 80001fe:	4a26      	ldr	r2, [pc, #152]	; (8000298 <getKeyInput+0x14c>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4921      	ldr	r1, [pc, #132]	; (800028c <getKeyInput+0x140>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d019      	beq.n	8000246 <getKeyInput+0xfa>
				  buttonBuffer[i] = KeyReg2[i];
 8000212:	4a1e      	ldr	r2, [pc, #120]	; (800028c <getKeyInput+0x140>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	491f      	ldr	r1, [pc, #124]	; (8000298 <getKeyInput+0x14c>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  if(buttonBuffer[i] == PRESSED_STATE){
 8000222:	4a1d      	ldr	r2, [pc, #116]	; (8000298 <getKeyInput+0x14c>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d11f      	bne.n	800026e <getKeyInput+0x122>
					  button_flag[i] = 1;
 800022e:	4a1b      	ldr	r2, [pc, #108]	; (800029c <getKeyInput+0x150>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2101      	movs	r1, #1
 8000234:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					  TimeOutForButtonPress[i] = 300;
 8000238:	4a19      	ldr	r2, [pc, #100]	; (80002a0 <getKeyInput+0x154>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000240:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000244:	e013      	b.n	800026e <getKeyInput+0x122>
				  }
			  }
			  else{
				  TimeOutForButtonPress[i]--;
 8000246:	4a16      	ldr	r2, [pc, #88]	; (80002a0 <getKeyInput+0x154>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800024e:	1e5a      	subs	r2, r3, #1
 8000250:	4913      	ldr	r1, [pc, #76]	; (80002a0 <getKeyInput+0x154>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				  if(TimeOutForButtonPress[i] <= 0){
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <getKeyInput+0x154>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	2b00      	cmp	r3, #0
 8000262:	dc04      	bgt.n	800026e <getKeyInput+0x122>
					  buttonBuffer[i] = NORMAL_STATE;
 8000264:	4a0c      	ldr	r2, [pc, #48]	; (8000298 <getKeyInput+0x14c>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2101      	movs	r1, #1
 800026a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_OF_BUTTON; i++){
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	3301      	adds	r3, #1
 8000272:	607b      	str	r3, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b02      	cmp	r3, #2
 8000278:	f77f af6e 	ble.w	8000158 <getKeyInput+0xc>
				  }
			  }
		  }
	}
}
 800027c:	bf00      	nop
 800027e:	bf00      	nop
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000018 	.word	0x20000018
 800028c:	20000024 	.word	0x20000024
 8000290:	2000000c 	.word	0x2000000c
 8000294:	40010c00 	.word	0x40010c00
 8000298:	20000000 	.word	0x20000000
 800029c:	20000078 	.word	0x20000078
 80002a0:	200000d4 	.word	0x200000d4

080002a4 <isButtonPress>:


int isButtonPress(int index){
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	if(index >= NUM_OF_BUTTON) return 0;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	dd01      	ble.n	80002b6 <isButtonPress+0x12>
 80002b2:	2300      	movs	r3, #0
 80002b4:	e00d      	b.n	80002d2 <isButtonPress+0x2e>
	if(button_flag[index] == 1){
 80002b6:	4a09      	ldr	r2, [pc, #36]	; (80002dc <isButtonPress+0x38>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d106      	bne.n	80002d0 <isButtonPress+0x2c>
		button_flag[index] = 0;
 80002c2:	4a06      	ldr	r2, [pc, #24]	; (80002dc <isButtonPress+0x38>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2100      	movs	r1, #0
 80002c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002cc:	2301      	movs	r3, #1
 80002ce:	e000      	b.n	80002d2 <isButtonPress+0x2e>
	}
	return 0;
 80002d0:	2300      	movs	r3, #0
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	20000078 	.word	0x20000078

080002e0 <Button1IsPressed>:
int Button1IsPressed(){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	return isButtonPress(0);
 80002e4:	2000      	movs	r0, #0
 80002e6:	f7ff ffdd 	bl	80002a4 <isButtonPress>
 80002ea:	4603      	mov	r3, r0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <Button2IsPressed>:
int Button2IsPressed(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	return isButtonPress(1);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f7ff ffd5 	bl	80002a4 <isButtonPress>
 80002fa:	4603      	mov	r3, r0
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	bd80      	pop	{r7, pc}

08000300 <Button3IsPressed>:
int Button3IsPressed(){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	return isButtonPress(2);
 8000304:	2002      	movs	r0, #2
 8000306:	f7ff ffcd 	bl	80002a4 <isButtonPress>
 800030a:	4603      	mov	r3, r0
}
 800030c:	4618      	mov	r0, r3
 800030e:	bd80      	pop	{r7, pc}

08000310 <auto_traffic>:
#include "fsm_automatic.h"
#include "traffic.h"
#include "global.h"
#include "main.h"

void auto_traffic(){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	switch (status_row){
 8000314:	4b84      	ldr	r3, [pc, #528]	; (8000528 <auto_traffic+0x218>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b0e      	cmp	r3, #14
 800031a:	d036      	beq.n	800038a <auto_traffic+0x7a>
 800031c:	2b0e      	cmp	r3, #14
 800031e:	f300 8091 	bgt.w	8000444 <auto_traffic+0x134>
 8000322:	2b0c      	cmp	r3, #12
 8000324:	d002      	beq.n	800032c <auto_traffic+0x1c>
 8000326:	2b0d      	cmp	r3, #13
 8000328:	d05e      	beq.n	80003e8 <auto_traffic+0xd8>
					green_row[0] = greent[0];
					green_row[1] = greent[1];
					status_row = YELLOW_ROW;
			}
		default:
			break;
 800032a:	e08b      	b.n	8000444 <auto_traffic+0x134>
			setRR();
 800032c:	f000 fe48 	bl	8000fc0 <setRR>
			red_row[1]--;
 8000330:	4b7e      	ldr	r3, [pc, #504]	; (800052c <auto_traffic+0x21c>)
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	3b01      	subs	r3, #1
 8000336:	4a7d      	ldr	r2, [pc, #500]	; (800052c <auto_traffic+0x21c>)
 8000338:	6053      	str	r3, [r2, #4]
			if(red_row[1] < 0){
 800033a:	4b7c      	ldr	r3, [pc, #496]	; (800052c <auto_traffic+0x21c>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	2b00      	cmp	r3, #0
 8000340:	da07      	bge.n	8000352 <auto_traffic+0x42>
				red_row[0]--;
 8000342:	4b7a      	ldr	r3, [pc, #488]	; (800052c <auto_traffic+0x21c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	3b01      	subs	r3, #1
 8000348:	4a78      	ldr	r2, [pc, #480]	; (800052c <auto_traffic+0x21c>)
 800034a:	6013      	str	r3, [r2, #0]
				red_row[1] = 9;
 800034c:	4b77      	ldr	r3, [pc, #476]	; (800052c <auto_traffic+0x21c>)
 800034e:	2209      	movs	r2, #9
 8000350:	605a      	str	r2, [r3, #4]
			led_buffer[0] = red_row[0];
 8000352:	4b76      	ldr	r3, [pc, #472]	; (800052c <auto_traffic+0x21c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a76      	ldr	r2, [pc, #472]	; (8000530 <auto_traffic+0x220>)
 8000358:	6013      	str	r3, [r2, #0]
			led_buffer[1] = red_row[1];
 800035a:	4b74      	ldr	r3, [pc, #464]	; (800052c <auto_traffic+0x21c>)
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	4a74      	ldr	r2, [pc, #464]	; (8000530 <auto_traffic+0x220>)
 8000360:	6053      	str	r3, [r2, #4]
			if(red_row[0] <= 0 && red_row[1] <= 0){
 8000362:	4b72      	ldr	r3, [pc, #456]	; (800052c <auto_traffic+0x21c>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	dc6e      	bgt.n	8000448 <auto_traffic+0x138>
 800036a:	4b70      	ldr	r3, [pc, #448]	; (800052c <auto_traffic+0x21c>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	2b00      	cmp	r3, #0
 8000370:	dc6a      	bgt.n	8000448 <auto_traffic+0x138>
				red_row[0] = redt[0];
 8000372:	4b70      	ldr	r3, [pc, #448]	; (8000534 <auto_traffic+0x224>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a6d      	ldr	r2, [pc, #436]	; (800052c <auto_traffic+0x21c>)
 8000378:	6013      	str	r3, [r2, #0]
				red_row[1] = redt[1];
 800037a:	4b6e      	ldr	r3, [pc, #440]	; (8000534 <auto_traffic+0x224>)
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	4a6b      	ldr	r2, [pc, #428]	; (800052c <auto_traffic+0x21c>)
 8000380:	6053      	str	r3, [r2, #4]
				status_row = GREEN_ROW;
 8000382:	4b69      	ldr	r3, [pc, #420]	; (8000528 <auto_traffic+0x218>)
 8000384:	220d      	movs	r2, #13
 8000386:	601a      	str	r2, [r3, #0]
			break;
 8000388:	e05e      	b.n	8000448 <auto_traffic+0x138>
			setYR();
 800038a:	f000 fe29 	bl	8000fe0 <setYR>
			yellow_row[1]--;
 800038e:	4b6a      	ldr	r3, [pc, #424]	; (8000538 <auto_traffic+0x228>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	3b01      	subs	r3, #1
 8000394:	4a68      	ldr	r2, [pc, #416]	; (8000538 <auto_traffic+0x228>)
 8000396:	6053      	str	r3, [r2, #4]
			if(yellow_row[1] < 0){
 8000398:	4b67      	ldr	r3, [pc, #412]	; (8000538 <auto_traffic+0x228>)
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	2b00      	cmp	r3, #0
 800039e:	da07      	bge.n	80003b0 <auto_traffic+0xa0>
				yellow_row[0]--;
 80003a0:	4b65      	ldr	r3, [pc, #404]	; (8000538 <auto_traffic+0x228>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	3b01      	subs	r3, #1
 80003a6:	4a64      	ldr	r2, [pc, #400]	; (8000538 <auto_traffic+0x228>)
 80003a8:	6013      	str	r3, [r2, #0]
				yellow_row[1] = 9;
 80003aa:	4b63      	ldr	r3, [pc, #396]	; (8000538 <auto_traffic+0x228>)
 80003ac:	2209      	movs	r2, #9
 80003ae:	605a      	str	r2, [r3, #4]
			led_buffer[0] = yellow_row[0];
 80003b0:	4b61      	ldr	r3, [pc, #388]	; (8000538 <auto_traffic+0x228>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a5e      	ldr	r2, [pc, #376]	; (8000530 <auto_traffic+0x220>)
 80003b6:	6013      	str	r3, [r2, #0]
			led_buffer[1] = yellow_row[1];
 80003b8:	4b5f      	ldr	r3, [pc, #380]	; (8000538 <auto_traffic+0x228>)
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	4a5c      	ldr	r2, [pc, #368]	; (8000530 <auto_traffic+0x220>)
 80003be:	6053      	str	r3, [r2, #4]
			if(yellow_row[0] <= 0 && yellow_row[1] <= 0){
 80003c0:	4b5d      	ldr	r3, [pc, #372]	; (8000538 <auto_traffic+0x228>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	dc41      	bgt.n	800044c <auto_traffic+0x13c>
 80003c8:	4b5b      	ldr	r3, [pc, #364]	; (8000538 <auto_traffic+0x228>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	dc3d      	bgt.n	800044c <auto_traffic+0x13c>
				yellow_row[0] = yellowt[0];
 80003d0:	4b5a      	ldr	r3, [pc, #360]	; (800053c <auto_traffic+0x22c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a58      	ldr	r2, [pc, #352]	; (8000538 <auto_traffic+0x228>)
 80003d6:	6013      	str	r3, [r2, #0]
				yellow_row[1] = yellowt[1];
 80003d8:	4b58      	ldr	r3, [pc, #352]	; (800053c <auto_traffic+0x22c>)
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	4a56      	ldr	r2, [pc, #344]	; (8000538 <auto_traffic+0x228>)
 80003de:	6053      	str	r3, [r2, #4]
				status_row = RED_ROW;
 80003e0:	4b51      	ldr	r3, [pc, #324]	; (8000528 <auto_traffic+0x218>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	601a      	str	r2, [r3, #0]
			break;
 80003e6:	e031      	b.n	800044c <auto_traffic+0x13c>
			setGR();
 80003e8:	f000 fdc8 	bl	8000f7c <setGR>
			green_row[1]--;
 80003ec:	4b54      	ldr	r3, [pc, #336]	; (8000540 <auto_traffic+0x230>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	3b01      	subs	r3, #1
 80003f2:	4a53      	ldr	r2, [pc, #332]	; (8000540 <auto_traffic+0x230>)
 80003f4:	6053      	str	r3, [r2, #4]
			if(green_row[1] < 0){
 80003f6:	4b52      	ldr	r3, [pc, #328]	; (8000540 <auto_traffic+0x230>)
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	da07      	bge.n	800040e <auto_traffic+0xfe>
				green_row[0]--;
 80003fe:	4b50      	ldr	r3, [pc, #320]	; (8000540 <auto_traffic+0x230>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	3b01      	subs	r3, #1
 8000404:	4a4e      	ldr	r2, [pc, #312]	; (8000540 <auto_traffic+0x230>)
 8000406:	6013      	str	r3, [r2, #0]
				green_row[1] = 9;
 8000408:	4b4d      	ldr	r3, [pc, #308]	; (8000540 <auto_traffic+0x230>)
 800040a:	2209      	movs	r2, #9
 800040c:	605a      	str	r2, [r3, #4]
			led_buffer[0] = green_row[0];
 800040e:	4b4c      	ldr	r3, [pc, #304]	; (8000540 <auto_traffic+0x230>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a47      	ldr	r2, [pc, #284]	; (8000530 <auto_traffic+0x220>)
 8000414:	6013      	str	r3, [r2, #0]
			led_buffer[1] = green_row[1];
 8000416:	4b4a      	ldr	r3, [pc, #296]	; (8000540 <auto_traffic+0x230>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	4a45      	ldr	r2, [pc, #276]	; (8000530 <auto_traffic+0x220>)
 800041c:	6053      	str	r3, [r2, #4]
			if(green_row[0] <= 0 && green_row[1] <= 0){
 800041e:	4b48      	ldr	r3, [pc, #288]	; (8000540 <auto_traffic+0x230>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	dc0e      	bgt.n	8000444 <auto_traffic+0x134>
 8000426:	4b46      	ldr	r3, [pc, #280]	; (8000540 <auto_traffic+0x230>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	dc0a      	bgt.n	8000444 <auto_traffic+0x134>
					green_row[0] = greent[0];
 800042e:	4b45      	ldr	r3, [pc, #276]	; (8000544 <auto_traffic+0x234>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a43      	ldr	r2, [pc, #268]	; (8000540 <auto_traffic+0x230>)
 8000434:	6013      	str	r3, [r2, #0]
					green_row[1] = greent[1];
 8000436:	4b43      	ldr	r3, [pc, #268]	; (8000544 <auto_traffic+0x234>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	4a41      	ldr	r2, [pc, #260]	; (8000540 <auto_traffic+0x230>)
 800043c:	6053      	str	r3, [r2, #4]
					status_row = YELLOW_ROW;
 800043e:	4b3a      	ldr	r3, [pc, #232]	; (8000528 <auto_traffic+0x218>)
 8000440:	220e      	movs	r2, #14
 8000442:	601a      	str	r2, [r3, #0]
			break;
 8000444:	bf00      	nop
 8000446:	e002      	b.n	800044e <auto_traffic+0x13e>
			break;
 8000448:	bf00      	nop
 800044a:	e000      	b.n	800044e <auto_traffic+0x13e>
			break;
 800044c:	bf00      	nop
	}
	switch (status_column){
 800044e:	4b3e      	ldr	r3, [pc, #248]	; (8000548 <auto_traffic+0x238>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b11      	cmp	r3, #17
 8000454:	d038      	beq.n	80004c8 <auto_traffic+0x1b8>
 8000456:	2b11      	cmp	r3, #17
 8000458:	f300 80ab 	bgt.w	80005b2 <auto_traffic+0x2a2>
 800045c:	2b0f      	cmp	r3, #15
 800045e:	d002      	beq.n	8000466 <auto_traffic+0x156>
 8000460:	2b10      	cmp	r3, #16
 8000462:	d077      	beq.n	8000554 <auto_traffic+0x244>
				green_column[1] = greent[1];
				status_column = YELLOW_COLUMN;
			}
			break;
		default:
			break;
 8000464:	e0a5      	b.n	80005b2 <auto_traffic+0x2a2>
			setRC();
 8000466:	f000 fd99 	bl	8000f9c <setRC>
			red_column[1]--;
 800046a:	4b38      	ldr	r3, [pc, #224]	; (800054c <auto_traffic+0x23c>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	3b01      	subs	r3, #1
 8000470:	4a36      	ldr	r2, [pc, #216]	; (800054c <auto_traffic+0x23c>)
 8000472:	6053      	str	r3, [r2, #4]
			if(red_column[1] < 0){
 8000474:	4b35      	ldr	r3, [pc, #212]	; (800054c <auto_traffic+0x23c>)
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	2b00      	cmp	r3, #0
 800047a:	da07      	bge.n	800048c <auto_traffic+0x17c>
				red_column[0]--;
 800047c:	4b33      	ldr	r3, [pc, #204]	; (800054c <auto_traffic+0x23c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	3b01      	subs	r3, #1
 8000482:	4a32      	ldr	r2, [pc, #200]	; (800054c <auto_traffic+0x23c>)
 8000484:	6013      	str	r3, [r2, #0]
				red_column[1] = 9;
 8000486:	4b31      	ldr	r3, [pc, #196]	; (800054c <auto_traffic+0x23c>)
 8000488:	2209      	movs	r2, #9
 800048a:	605a      	str	r2, [r3, #4]
			led_buffer[2] = red_column[0];
 800048c:	4b2f      	ldr	r3, [pc, #188]	; (800054c <auto_traffic+0x23c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a27      	ldr	r2, [pc, #156]	; (8000530 <auto_traffic+0x220>)
 8000492:	6093      	str	r3, [r2, #8]
			led_buffer[3] = red_column[1];
 8000494:	4b2d      	ldr	r3, [pc, #180]	; (800054c <auto_traffic+0x23c>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	4a25      	ldr	r2, [pc, #148]	; (8000530 <auto_traffic+0x220>)
 800049a:	60d3      	str	r3, [r2, #12]
			if(red_column[0] <= 0 && red_column[1] <= 0){
 800049c:	4b2b      	ldr	r3, [pc, #172]	; (800054c <auto_traffic+0x23c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	f300 8088 	bgt.w	80005b6 <auto_traffic+0x2a6>
 80004a6:	4b29      	ldr	r3, [pc, #164]	; (800054c <auto_traffic+0x23c>)
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f300 8083 	bgt.w	80005b6 <auto_traffic+0x2a6>
				red_column[0] = redt[0];
 80004b0:	4b20      	ldr	r3, [pc, #128]	; (8000534 <auto_traffic+0x224>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a25      	ldr	r2, [pc, #148]	; (800054c <auto_traffic+0x23c>)
 80004b6:	6013      	str	r3, [r2, #0]
				red_column[1] = redt[1];
 80004b8:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <auto_traffic+0x224>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	4a23      	ldr	r2, [pc, #140]	; (800054c <auto_traffic+0x23c>)
 80004be:	6053      	str	r3, [r2, #4]
				status_column = GREEN_COLUMN;
 80004c0:	4b21      	ldr	r3, [pc, #132]	; (8000548 <auto_traffic+0x238>)
 80004c2:	2210      	movs	r2, #16
 80004c4:	601a      	str	r2, [r3, #0]
			break;
 80004c6:	e076      	b.n	80005b6 <auto_traffic+0x2a6>
			setYC();
 80004c8:	f000 fdb8 	bl	800103c <setYC>
			yellow_column[1]--;
 80004cc:	4b20      	ldr	r3, [pc, #128]	; (8000550 <auto_traffic+0x240>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	3b01      	subs	r3, #1
 80004d2:	4a1f      	ldr	r2, [pc, #124]	; (8000550 <auto_traffic+0x240>)
 80004d4:	6053      	str	r3, [r2, #4]
			if(yellow_column[1] < 0){
 80004d6:	4b1e      	ldr	r3, [pc, #120]	; (8000550 <auto_traffic+0x240>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	da07      	bge.n	80004ee <auto_traffic+0x1de>
				yellow_column[0]--;
 80004de:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <auto_traffic+0x240>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	3b01      	subs	r3, #1
 80004e4:	4a1a      	ldr	r2, [pc, #104]	; (8000550 <auto_traffic+0x240>)
 80004e6:	6013      	str	r3, [r2, #0]
				yellow_column[1] = 9;
 80004e8:	4b19      	ldr	r3, [pc, #100]	; (8000550 <auto_traffic+0x240>)
 80004ea:	2209      	movs	r2, #9
 80004ec:	605a      	str	r2, [r3, #4]
			led_buffer[2] = yellow_column[0];
 80004ee:	4b18      	ldr	r3, [pc, #96]	; (8000550 <auto_traffic+0x240>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <auto_traffic+0x220>)
 80004f4:	6093      	str	r3, [r2, #8]
			led_buffer[3] = yellow_column[1];
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <auto_traffic+0x240>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <auto_traffic+0x220>)
 80004fc:	60d3      	str	r3, [r2, #12]
			if(yellow_column[0] <= 0 && yellow_column[1] <= 0){
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <auto_traffic+0x240>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	dc59      	bgt.n	80005ba <auto_traffic+0x2aa>
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <auto_traffic+0x240>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	2b00      	cmp	r3, #0
 800050c:	dc55      	bgt.n	80005ba <auto_traffic+0x2aa>
				yellow_column[0] = yellowt[0];
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <auto_traffic+0x22c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <auto_traffic+0x240>)
 8000514:	6013      	str	r3, [r2, #0]
				yellow_column[1] = yellowt[1];
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <auto_traffic+0x22c>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <auto_traffic+0x240>)
 800051c:	6053      	str	r3, [r2, #4]
				status_column = RED_COLUMN;
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <auto_traffic+0x238>)
 8000520:	220f      	movs	r2, #15
 8000522:	601a      	str	r2, [r3, #0]
			break;
 8000524:	e049      	b.n	80005ba <auto_traffic+0x2aa>
 8000526:	bf00      	nop
 8000528:	200000f4 	.word	0x200000f4
 800052c:	200000a4 	.word	0x200000a4
 8000530:	200000e4 	.word	0x200000e4
 8000534:	2000003c 	.word	0x2000003c
 8000538:	200000ac 	.word	0x200000ac
 800053c:	20000044 	.word	0x20000044
 8000540:	200000b4 	.word	0x200000b4
 8000544:	2000004c 	.word	0x2000004c
 8000548:	200000e0 	.word	0x200000e0
 800054c:	200000bc 	.word	0x200000bc
 8000550:	200000c4 	.word	0x200000c4
			setGC();
 8000554:	f000 fd54 	bl	8001000 <setGC>
			green_column[1]--;
 8000558:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <auto_traffic+0x2b4>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	3b01      	subs	r3, #1
 800055e:	4a19      	ldr	r2, [pc, #100]	; (80005c4 <auto_traffic+0x2b4>)
 8000560:	6053      	str	r3, [r2, #4]
			if(green_column[1] < 0){
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <auto_traffic+0x2b4>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	da07      	bge.n	800057a <auto_traffic+0x26a>
				green_column[0]--;
 800056a:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <auto_traffic+0x2b4>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	3b01      	subs	r3, #1
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <auto_traffic+0x2b4>)
 8000572:	6013      	str	r3, [r2, #0]
				green_column[1] = 9;
 8000574:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <auto_traffic+0x2b4>)
 8000576:	2209      	movs	r2, #9
 8000578:	605a      	str	r2, [r3, #4]
			led_buffer[2] = green_column[0];
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <auto_traffic+0x2b4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <auto_traffic+0x2b8>)
 8000580:	6093      	str	r3, [r2, #8]
			led_buffer[3] = green_column[1];
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <auto_traffic+0x2b4>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	4a10      	ldr	r2, [pc, #64]	; (80005c8 <auto_traffic+0x2b8>)
 8000588:	60d3      	str	r3, [r2, #12]
			if(green_column[0] <= 0 && green_column[1] <= 0){
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <auto_traffic+0x2b4>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	dc15      	bgt.n	80005be <auto_traffic+0x2ae>
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <auto_traffic+0x2b4>)
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	dc11      	bgt.n	80005be <auto_traffic+0x2ae>
				green_column[0] = greent[0];
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <auto_traffic+0x2bc>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <auto_traffic+0x2b4>)
 80005a0:	6013      	str	r3, [r2, #0]
				green_column[1] = greent[1];
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <auto_traffic+0x2bc>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <auto_traffic+0x2b4>)
 80005a8:	6053      	str	r3, [r2, #4]
				status_column = YELLOW_COLUMN;
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <auto_traffic+0x2c0>)
 80005ac:	2211      	movs	r2, #17
 80005ae:	601a      	str	r2, [r3, #0]
			break;
 80005b0:	e005      	b.n	80005be <auto_traffic+0x2ae>
			break;
 80005b2:	bf00      	nop
 80005b4:	e004      	b.n	80005c0 <auto_traffic+0x2b0>
			break;
 80005b6:	bf00      	nop
 80005b8:	e002      	b.n	80005c0 <auto_traffic+0x2b0>
			break;
 80005ba:	bf00      	nop
 80005bc:	e000      	b.n	80005c0 <auto_traffic+0x2b0>
			break;
 80005be:	bf00      	nop
	}
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200000cc 	.word	0x200000cc
 80005c8:	200000e4 	.word	0x200000e4
 80005cc:	2000004c 	.word	0x2000004c
 80005d0:	200000e0 	.word	0x200000e0

080005d4 <RunSystem>:
#include "fsm_system.h"
#include "fsm_automatic.h"
#include "global.h"
#include "button.h"

void RunSystem(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	switch (status){
 80005d8:	4ba8      	ldr	r3, [pc, #672]	; (800087c <RunSystem+0x2a8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3b01      	subs	r3, #1
 80005de:	2b04      	cmp	r3, #4
 80005e0:	f200 81e2 	bhi.w	80009a8 <RunSystem+0x3d4>
 80005e4:	a201      	add	r2, pc, #4	; (adr r2, 80005ec <RunSystem+0x18>)
 80005e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ea:	bf00      	nop
 80005ec:	08000601 	.word	0x08000601
 80005f0:	0800061d 	.word	0x0800061d
 80005f4:	0800068b 	.word	0x0800068b
 80005f8:	08000783 	.word	0x08000783
 80005fc:	080008b5 	.word	0x080008b5
		case INIT:
			set_traffic();
 8000600:	f000 fc64 	bl	8000ecc <set_traffic>
			status = NORMAL_MODE;
 8000604:	4b9d      	ldr	r3, [pc, #628]	; (800087c <RunSystem+0x2a8>)
 8000606:	2202      	movs	r2, #2
 8000608:	601a      	str	r2, [r3, #0]
			setTimer2(500);
 800060a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060e:	f000 fb17 	bl	8000c40 <setTimer2>
			setTimer3(500);
 8000612:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000616:	f000 fb2d 	bl	8000c74 <setTimer3>
			break;
 800061a:	e1ce      	b.n	80009ba <RunSystem+0x3e6>
		case NORMAL_MODE:
			if(timer2_flag){
 800061c:	4b98      	ldr	r3, [pc, #608]	; (8000880 <RunSystem+0x2ac>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d005      	beq.n	8000630 <RunSystem+0x5c>
				auto_traffic();
 8000624:	f7ff fe74 	bl	8000310 <auto_traffic>
				setTimer2(1000);
 8000628:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800062c:	f000 fb08 	bl	8000c40 <setTimer2>
			}
			display_7SEG(counter);
 8000630:	4b94      	ldr	r3, [pc, #592]	; (8000884 <RunSystem+0x2b0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fc07 	bl	8000e48 <display_7SEG>
			if(timer3_flag){
 800063a:	4b93      	ldr	r3, [pc, #588]	; (8000888 <RunSystem+0x2b4>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d00f      	beq.n	8000662 <RunSystem+0x8e>
				counter++;
 8000642:	4b90      	ldr	r3, [pc, #576]	; (8000884 <RunSystem+0x2b0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	4a8e      	ldr	r2, [pc, #568]	; (8000884 <RunSystem+0x2b0>)
 800064a:	6013      	str	r3, [r2, #0]
				if(counter > 1){
 800064c:	4b8d      	ldr	r3, [pc, #564]	; (8000884 <RunSystem+0x2b0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	dd02      	ble.n	800065a <RunSystem+0x86>
					counter = 0;
 8000654:	4b8b      	ldr	r3, [pc, #556]	; (8000884 <RunSystem+0x2b0>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
				}
				setTimer3(500);
 800065a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800065e:	f000 fb09 	bl	8000c74 <setTimer3>
			}
			if(Button1IsPressed()){
 8000662:	f7ff fe3d 	bl	80002e0 <Button1IsPressed>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	f000 819f 	beq.w	80009ac <RunSystem+0x3d8>
				status = MODIFY_RED_MODE;
 800066e:	4b83      	ldr	r3, [pc, #524]	; (800087c <RunSystem+0x2a8>)
 8000670:	2203      	movs	r2, #3
 8000672:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000674:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000678:	f000 fac8 	bl	8000c0c <setTimer1>
				setTimer3(500);
 800067c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000680:	f000 faf8 	bl	8000c74 <setTimer3>
				tatLED();
 8000684:	f000 fcce 	bl	8001024 <tatLED>
			}
			break;
 8000688:	e190      	b.n	80009ac <RunSystem+0x3d8>
		case MODIFY_RED_MODE:
			if(Button2IsPressed()){
 800068a:	f7ff fe31 	bl	80002f0 <Button2IsPressed>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d017      	beq.n	80006c4 <RunSystem+0xf0>
				redt[1]++;
 8000694:	4b7d      	ldr	r3, [pc, #500]	; (800088c <RunSystem+0x2b8>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	3301      	adds	r3, #1
 800069a:	4a7c      	ldr	r2, [pc, #496]	; (800088c <RunSystem+0x2b8>)
 800069c:	6053      	str	r3, [r2, #4]
				if(redt[1] > 9){
 800069e:	4b7b      	ldr	r3, [pc, #492]	; (800088c <RunSystem+0x2b8>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	2b09      	cmp	r3, #9
 80006a4:	dd0e      	ble.n	80006c4 <RunSystem+0xf0>
					redt[0]++;
 80006a6:	4b79      	ldr	r3, [pc, #484]	; (800088c <RunSystem+0x2b8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	3301      	adds	r3, #1
 80006ac:	4a77      	ldr	r2, [pc, #476]	; (800088c <RunSystem+0x2b8>)
 80006ae:	6013      	str	r3, [r2, #0]
					redt[1] = 0;
 80006b0:	4b76      	ldr	r3, [pc, #472]	; (800088c <RunSystem+0x2b8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]
					if(redt[0] > 9 )
 80006b6:	4b75      	ldr	r3, [pc, #468]	; (800088c <RunSystem+0x2b8>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b09      	cmp	r3, #9
 80006bc:	dd02      	ble.n	80006c4 <RunSystem+0xf0>
						redt[0] = 0;
 80006be:	4b73      	ldr	r3, [pc, #460]	; (800088c <RunSystem+0x2b8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
				}
			}
			if(timer1_flag){
 80006c4:	4b72      	ldr	r3, [pc, #456]	; (8000890 <RunSystem+0x2bc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d022      	beq.n	8000712 <RunSystem+0x13e>
				led_buffer[0] = 0;
 80006cc:	4b71      	ldr	r3, [pc, #452]	; (8000894 <RunSystem+0x2c0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
				led_buffer[1] = 2;
 80006d2:	4b70      	ldr	r3, [pc, #448]	; (8000894 <RunSystem+0x2c0>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	605a      	str	r2, [r3, #4]
				led_buffer[2] = redt[0];
 80006d8:	4b6c      	ldr	r3, [pc, #432]	; (800088c <RunSystem+0x2b8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a6d      	ldr	r2, [pc, #436]	; (8000894 <RunSystem+0x2c0>)
 80006de:	6093      	str	r3, [r2, #8]
				led_buffer[3] = redt[1];
 80006e0:	4b6a      	ldr	r3, [pc, #424]	; (800088c <RunSystem+0x2b8>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	4a6b      	ldr	r2, [pc, #428]	; (8000894 <RunSystem+0x2c0>)
 80006e6:	60d3      	str	r3, [r2, #12]
				display_7SEG(count);
 80006e8:	4b6b      	ldr	r3, [pc, #428]	; (8000898 <RunSystem+0x2c4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fbab 	bl	8000e48 <display_7SEG>
				count++;
 80006f2:	4b69      	ldr	r3, [pc, #420]	; (8000898 <RunSystem+0x2c4>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	4a67      	ldr	r2, [pc, #412]	; (8000898 <RunSystem+0x2c4>)
 80006fa:	6013      	str	r3, [r2, #0]
				if(count > 1){
 80006fc:	4b66      	ldr	r3, [pc, #408]	; (8000898 <RunSystem+0x2c4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	dd02      	ble.n	800070a <RunSystem+0x136>
					count = 0;
 8000704:	4b64      	ldr	r3, [pc, #400]	; (8000898 <RunSystem+0x2c4>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
				}
				setTimer1(500);
 800070a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800070e:	f000 fa7d 	bl	8000c0c <setTimer1>
			}
			if(timer3_flag){
 8000712:	4b5d      	ldr	r3, [pc, #372]	; (8000888 <RunSystem+0x2b4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d007      	beq.n	800072a <RunSystem+0x156>
				HAL_GPIO_TogglePin(GPIOB, ra_Pin|rb_Pin);
 800071a:	2148      	movs	r1, #72	; 0x48
 800071c:	485f      	ldr	r0, [pc, #380]	; (800089c <RunSystem+0x2c8>)
 800071e:	f001 f920 	bl	8001962 <HAL_GPIO_TogglePin>
				setTimer3(500);
 8000722:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000726:	f000 faa5 	bl	8000c74 <setTimer3>
			}
			if(Button1IsPressed()){
 800072a:	f7ff fdd9 	bl	80002e0 <Button1IsPressed>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d00c      	beq.n	800074e <RunSystem+0x17a>
				status = MODIFY_YELLOW_MODE;
 8000734:	4b51      	ldr	r3, [pc, #324]	; (800087c <RunSystem+0x2a8>)
 8000736:	2204      	movs	r2, #4
 8000738:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 800073a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800073e:	f000 fa65 	bl	8000c0c <setTimer1>
				setTimer3(500);
 8000742:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000746:	f000 fa95 	bl	8000c74 <setTimer3>
				tatLED();
 800074a:	f000 fc6b 	bl	8001024 <tatLED>
			}
			if(Button3IsPressed()){
 800074e:	f7ff fdd7 	bl	8000300 <Button3IsPressed>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	f000 812b 	beq.w	80009b0 <RunSystem+0x3dc>
				red_row[0] = redt[0];
 800075a:	4b4c      	ldr	r3, [pc, #304]	; (800088c <RunSystem+0x2b8>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a50      	ldr	r2, [pc, #320]	; (80008a0 <RunSystem+0x2cc>)
 8000760:	6013      	str	r3, [r2, #0]
				red_row[1] = redt[1];
 8000762:	4b4a      	ldr	r3, [pc, #296]	; (800088c <RunSystem+0x2b8>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	4a4e      	ldr	r2, [pc, #312]	; (80008a0 <RunSystem+0x2cc>)
 8000768:	6053      	str	r3, [r2, #4]
				red_column[0] = redt[0];
 800076a:	4b48      	ldr	r3, [pc, #288]	; (800088c <RunSystem+0x2b8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a4d      	ldr	r2, [pc, #308]	; (80008a4 <RunSystem+0x2d0>)
 8000770:	6013      	str	r3, [r2, #0]
				red_column[1] = redt[1];
 8000772:	4b46      	ldr	r3, [pc, #280]	; (800088c <RunSystem+0x2b8>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	4a4b      	ldr	r2, [pc, #300]	; (80008a4 <RunSystem+0x2d0>)
 8000778:	6053      	str	r3, [r2, #4]
				status = INIT; //
 800077a:	4b40      	ldr	r3, [pc, #256]	; (800087c <RunSystem+0x2a8>)
 800077c:	2201      	movs	r2, #1
 800077e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000780:	e116      	b.n	80009b0 <RunSystem+0x3dc>
		case MODIFY_YELLOW_MODE:
			if(Button2IsPressed()){
 8000782:	f7ff fdb5 	bl	80002f0 <Button2IsPressed>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d017      	beq.n	80007bc <RunSystem+0x1e8>
				yellowt[1]++;
 800078c:	4b46      	ldr	r3, [pc, #280]	; (80008a8 <RunSystem+0x2d4>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	3301      	adds	r3, #1
 8000792:	4a45      	ldr	r2, [pc, #276]	; (80008a8 <RunSystem+0x2d4>)
 8000794:	6053      	str	r3, [r2, #4]
				if(yellowt[1] > 9){
 8000796:	4b44      	ldr	r3, [pc, #272]	; (80008a8 <RunSystem+0x2d4>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	2b09      	cmp	r3, #9
 800079c:	dd0e      	ble.n	80007bc <RunSystem+0x1e8>
					yellowt[0]++;
 800079e:	4b42      	ldr	r3, [pc, #264]	; (80008a8 <RunSystem+0x2d4>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	3301      	adds	r3, #1
 80007a4:	4a40      	ldr	r2, [pc, #256]	; (80008a8 <RunSystem+0x2d4>)
 80007a6:	6013      	str	r3, [r2, #0]
					yellowt[1] = 0;
 80007a8:	4b3f      	ldr	r3, [pc, #252]	; (80008a8 <RunSystem+0x2d4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
					if(yellowt[0] > 9 )
 80007ae:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <RunSystem+0x2d4>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b09      	cmp	r3, #9
 80007b4:	dd02      	ble.n	80007bc <RunSystem+0x1e8>
					yellowt[0] = 0;
 80007b6:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <RunSystem+0x2d4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
				}
			}
			if(timer1_flag){
 80007bc:	4b34      	ldr	r3, [pc, #208]	; (8000890 <RunSystem+0x2bc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d022      	beq.n	800080a <RunSystem+0x236>
				led_buffer[0] = 0;
 80007c4:	4b33      	ldr	r3, [pc, #204]	; (8000894 <RunSystem+0x2c0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
				led_buffer[1] = 3;
 80007ca:	4b32      	ldr	r3, [pc, #200]	; (8000894 <RunSystem+0x2c0>)
 80007cc:	2203      	movs	r2, #3
 80007ce:	605a      	str	r2, [r3, #4]
				led_buffer[2] = yellowt[0];
 80007d0:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <RunSystem+0x2d4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <RunSystem+0x2c0>)
 80007d6:	6093      	str	r3, [r2, #8]
				led_buffer[3] = yellowt[1];
 80007d8:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <RunSystem+0x2d4>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	4a2d      	ldr	r2, [pc, #180]	; (8000894 <RunSystem+0x2c0>)
 80007de:	60d3      	str	r3, [r2, #12]
				display_7SEG(count);
 80007e0:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <RunSystem+0x2c4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fb2f 	bl	8000e48 <display_7SEG>
				count++;
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <RunSystem+0x2c4>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	3301      	adds	r3, #1
 80007f0:	4a29      	ldr	r2, [pc, #164]	; (8000898 <RunSystem+0x2c4>)
 80007f2:	6013      	str	r3, [r2, #0]
				if(count > 1){
 80007f4:	4b28      	ldr	r3, [pc, #160]	; (8000898 <RunSystem+0x2c4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	dd02      	ble.n	8000802 <RunSystem+0x22e>
					count = 0;
 80007fc:	4b26      	ldr	r3, [pc, #152]	; (8000898 <RunSystem+0x2c4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
				}
				setTimer1(500);
 8000802:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000806:	f000 fa01 	bl	8000c0c <setTimer1>
			}
			if(timer3_flag){
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <RunSystem+0x2b4>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d007      	beq.n	8000822 <RunSystem+0x24e>
				HAL_GPIO_TogglePin(GPIOB, ya_Pin|yb_Pin);
 8000812:	2190      	movs	r1, #144	; 0x90
 8000814:	4821      	ldr	r0, [pc, #132]	; (800089c <RunSystem+0x2c8>)
 8000816:	f001 f8a4 	bl	8001962 <HAL_GPIO_TogglePin>
				setTimer3(500);
 800081a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081e:	f000 fa29 	bl	8000c74 <setTimer3>
			}
			if(Button1IsPressed()){
 8000822:	f7ff fd5d 	bl	80002e0 <Button1IsPressed>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d00c      	beq.n	8000846 <RunSystem+0x272>
				status = MODIFY_GREEN_MODE;
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <RunSystem+0x2a8>)
 800082e:	2205      	movs	r2, #5
 8000830:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000832:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000836:	f000 f9e9 	bl	8000c0c <setTimer1>
				setTimer3(500);
 800083a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800083e:	f000 fa19 	bl	8000c74 <setTimer3>
				tatLED();
 8000842:	f000 fbef 	bl	8001024 <tatLED>
			}
			if(Button3IsPressed()){
 8000846:	f7ff fd5b 	bl	8000300 <Button3IsPressed>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	f000 80b1 	beq.w	80009b4 <RunSystem+0x3e0>
				yellow_row[0] = yellowt[0];
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <RunSystem+0x2d4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a15      	ldr	r2, [pc, #84]	; (80008ac <RunSystem+0x2d8>)
 8000858:	6013      	str	r3, [r2, #0]
				yellow_row[1] = yellowt[1];
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <RunSystem+0x2d4>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	4a13      	ldr	r2, [pc, #76]	; (80008ac <RunSystem+0x2d8>)
 8000860:	6053      	str	r3, [r2, #4]
				yellow_column[0] = yellowt[0];
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <RunSystem+0x2d4>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <RunSystem+0x2dc>)
 8000868:	6013      	str	r3, [r2, #0]
				yellow_column[1] = yellowt[1];
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <RunSystem+0x2d4>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <RunSystem+0x2dc>)
 8000870:	6053      	str	r3, [r2, #4]
				//status_row= RED_ROW;
				//status_column= GREEN_COLUMN;
				status = INIT;
 8000872:	4b02      	ldr	r3, [pc, #8]	; (800087c <RunSystem+0x2a8>)
 8000874:	2201      	movs	r2, #1
 8000876:	601a      	str	r2, [r3, #0]
			}
			break;
 8000878:	e09c      	b.n	80009b4 <RunSystem+0x3e0>
 800087a:	bf00      	nop
 800087c:	20000030 	.word	0x20000030
 8000880:	20000094 	.word	0x20000094
 8000884:	20000088 	.word	0x20000088
 8000888:	2000009c 	.word	0x2000009c
 800088c:	2000003c 	.word	0x2000003c
 8000890:	2000008c 	.word	0x2000008c
 8000894:	200000e4 	.word	0x200000e4
 8000898:	20000084 	.word	0x20000084
 800089c:	40010c00 	.word	0x40010c00
 80008a0:	200000a4 	.word	0x200000a4
 80008a4:	200000bc 	.word	0x200000bc
 80008a8:	20000044 	.word	0x20000044
 80008ac:	200000ac 	.word	0x200000ac
 80008b0:	200000c4 	.word	0x200000c4
		case MODIFY_GREEN_MODE:
			if(Button2IsPressed()){
 80008b4:	f7ff fd1c 	bl	80002f0 <Button2IsPressed>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d017      	beq.n	80008ee <RunSystem+0x31a>
				greent[1]++;
 80008be:	4b40      	ldr	r3, [pc, #256]	; (80009c0 <RunSystem+0x3ec>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a3e      	ldr	r2, [pc, #248]	; (80009c0 <RunSystem+0x3ec>)
 80008c6:	6053      	str	r3, [r2, #4]
				if(greent[1] > 9){
 80008c8:	4b3d      	ldr	r3, [pc, #244]	; (80009c0 <RunSystem+0x3ec>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	2b09      	cmp	r3, #9
 80008ce:	dd0e      	ble.n	80008ee <RunSystem+0x31a>
					greent[0]++;
 80008d0:	4b3b      	ldr	r3, [pc, #236]	; (80009c0 <RunSystem+0x3ec>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a3a      	ldr	r2, [pc, #232]	; (80009c0 <RunSystem+0x3ec>)
 80008d8:	6013      	str	r3, [r2, #0]
					greent[1] = 0;
 80008da:	4b39      	ldr	r3, [pc, #228]	; (80009c0 <RunSystem+0x3ec>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
					if(greent[0] > 9 )
 80008e0:	4b37      	ldr	r3, [pc, #220]	; (80009c0 <RunSystem+0x3ec>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b09      	cmp	r3, #9
 80008e6:	dd02      	ble.n	80008ee <RunSystem+0x31a>
					greent[0] = 0;
 80008e8:	4b35      	ldr	r3, [pc, #212]	; (80009c0 <RunSystem+0x3ec>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
				}
			}
			if(timer1_flag){
 80008ee:	4b35      	ldr	r3, [pc, #212]	; (80009c4 <RunSystem+0x3f0>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d022      	beq.n	800093c <RunSystem+0x368>
				led_buffer[0] = 0;
 80008f6:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <RunSystem+0x3f4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
				led_buffer[1] = 4;
 80008fc:	4b32      	ldr	r3, [pc, #200]	; (80009c8 <RunSystem+0x3f4>)
 80008fe:	2204      	movs	r2, #4
 8000900:	605a      	str	r2, [r3, #4]
				led_buffer[2] = greent[0];
 8000902:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <RunSystem+0x3ec>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a30      	ldr	r2, [pc, #192]	; (80009c8 <RunSystem+0x3f4>)
 8000908:	6093      	str	r3, [r2, #8]
				led_buffer[3] = greent[1];
 800090a:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <RunSystem+0x3ec>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	4a2e      	ldr	r2, [pc, #184]	; (80009c8 <RunSystem+0x3f4>)
 8000910:	60d3      	str	r3, [r2, #12]
				display_7SEG(count);
 8000912:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <RunSystem+0x3f8>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fa96 	bl	8000e48 <display_7SEG>
				count++;
 800091c:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <RunSystem+0x3f8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	4a2a      	ldr	r2, [pc, #168]	; (80009cc <RunSystem+0x3f8>)
 8000924:	6013      	str	r3, [r2, #0]
				if(count > 1){
 8000926:	4b29      	ldr	r3, [pc, #164]	; (80009cc <RunSystem+0x3f8>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b01      	cmp	r3, #1
 800092c:	dd02      	ble.n	8000934 <RunSystem+0x360>
					count = 0;
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <RunSystem+0x3f8>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
				}
				setTimer1(500);
 8000934:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000938:	f000 f968 	bl	8000c0c <setTimer1>
			}
			if(timer3_flag){
 800093c:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <RunSystem+0x3fc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d008      	beq.n	8000956 <RunSystem+0x382>
				HAL_GPIO_TogglePin(GPIOB, ga_Pin|gb_Pin);
 8000944:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000948:	4822      	ldr	r0, [pc, #136]	; (80009d4 <RunSystem+0x400>)
 800094a:	f001 f80a 	bl	8001962 <HAL_GPIO_TogglePin>
				setTimer3(500);
 800094e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000952:	f000 f98f 	bl	8000c74 <setTimer3>
			}
			if(Button1IsPressed()){
 8000956:	f7ff fcc3 	bl	80002e0 <Button1IsPressed>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00a      	beq.n	8000976 <RunSystem+0x3a2>
				status = INIT; //
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <RunSystem+0x404>)
 8000962:	2201      	movs	r2, #1
 8000964:	601a      	str	r2, [r3, #0]
				setTimer2(500);
 8000966:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800096a:	f000 f969 	bl	8000c40 <setTimer2>
				setTimer1(500);
 800096e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000972:	f000 f94b 	bl	8000c0c <setTimer1>
			}
			if(Button3IsPressed()){
 8000976:	f7ff fcc3 	bl	8000300 <Button3IsPressed>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d01b      	beq.n	80009b8 <RunSystem+0x3e4>
				green_row[0] = greent[0];
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <RunSystem+0x3ec>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a15      	ldr	r2, [pc, #84]	; (80009dc <RunSystem+0x408>)
 8000986:	6013      	str	r3, [r2, #0]
				green_row[1] = greent[1];
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <RunSystem+0x3ec>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	4a13      	ldr	r2, [pc, #76]	; (80009dc <RunSystem+0x408>)
 800098e:	6053      	str	r3, [r2, #4]
				green_column[0] = greent[0];
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <RunSystem+0x3ec>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <RunSystem+0x40c>)
 8000996:	6013      	str	r3, [r2, #0]
				green_column[1] = greent[1];
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <RunSystem+0x3ec>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <RunSystem+0x40c>)
 800099e:	6053      	str	r3, [r2, #4]

				status = INIT;//
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <RunSystem+0x404>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
			}
			break;
 80009a6:	e007      	b.n	80009b8 <RunSystem+0x3e4>
		default:
			break;
 80009a8:	bf00      	nop
 80009aa:	e006      	b.n	80009ba <RunSystem+0x3e6>
			break;
 80009ac:	bf00      	nop
 80009ae:	e004      	b.n	80009ba <RunSystem+0x3e6>
			break;
 80009b0:	bf00      	nop
 80009b2:	e002      	b.n	80009ba <RunSystem+0x3e6>
			break;
 80009b4:	bf00      	nop
 80009b6:	e000      	b.n	80009ba <RunSystem+0x3e6>
			break;
 80009b8:	bf00      	nop
	}
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000004c 	.word	0x2000004c
 80009c4:	2000008c 	.word	0x2000008c
 80009c8:	200000e4 	.word	0x200000e4
 80009cc:	20000084 	.word	0x20000084
 80009d0:	2000009c 	.word	0x2000009c
 80009d4:	40010c00 	.word	0x40010c00
 80009d8:	20000030 	.word	0x20000030
 80009dc:	200000b4 	.word	0x200000b4
 80009e0:	200000cc 	.word	0x200000cc

080009e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e8:	f000 fca2 	bl	8001330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ec:	f000 f812 	bl	8000a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f0:	f000 f898 	bl	8000b24 <MX_GPIO_Init>
  MX_TIM2_Init();
 80009f4:	f000 f84a 	bl	8000a8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <main+0x28>)
 80009fa:	f001 fc03 	bl	8002204 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	status = INIT;
 80009fe:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <main+0x2c>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	  RunSystem();
 8000a04:	f7ff fde6 	bl	80005d4 <RunSystem>
 8000a08:	e7fc      	b.n	8000a04 <main+0x20>
 8000a0a:	bf00      	nop
 8000a0c:	200000f8 	.word	0x200000f8
 8000a10:	20000030 	.word	0x20000030

08000a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b090      	sub	sp, #64	; 0x40
 8000a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	f107 0318 	add.w	r3, r7, #24
 8000a1e:	2228      	movs	r2, #40	; 0x28
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 ffa6 	bl	8002974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3e:	2310      	movs	r3, #16
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 0318 	add.w	r3, r7, #24
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 ffa2 	bl	8001994 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a56:	f000 f8d3 	bl	8000c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 fa0e 	bl	8001e94 <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 f8bf 	bl	8000c00 <Error_Handler>
  }
}
 8000a82:	bf00      	nop
 8000a84:	3740      	adds	r7, #64	; 0x40
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000aaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000ab2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ab6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000ac0:	220a      	movs	r2, #10
 8000ac2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ad0:	4813      	ldr	r0, [pc, #76]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000ad2:	f001 fb47 	bl	8002164 <HAL_TIM_Base_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000adc:	f000 f890 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	4619      	mov	r1, r3
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000aee:	f001 fcdd 	bl	80024ac <HAL_TIM_ConfigClockSource>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000af8:	f000 f882 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afc:	2300      	movs	r3, #0
 8000afe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b04:	463b      	mov	r3, r7
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_TIM2_Init+0x94>)
 8000b0a:	f001 fea5 	bl	8002858 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b14:	f000 f874 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200000f8 	.word	0x200000f8

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a27      	ldr	r2, [pc, #156]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b50:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a21      	ldr	r2, [pc, #132]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b56:	f043 0308 	orr.w	r3, r3, #8
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MX_GPIO_Init+0xb8>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0308 	and.w	r3, r3, #8
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, sa1_Pin|sa2_Pin|sa3_Pin|sa4_Pin
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f643 71f8 	movw	r1, #16376	; 0x3ff8
 8000b6e:	481c      	ldr	r0, [pc, #112]	; (8000be0 <MX_GPIO_Init+0xbc>)
 8000b70:	f000 fedf 	bl	8001932 <HAL_GPIO_WritePin>
                          |sa5_Pin|sa6_Pin|sa7_Pin|e0_Pin
                          |e1_Pin|e2_Pin|e3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, sb2_Pin|sb3_Pin|sb4_Pin|sb5_Pin
 8000b74:	2200      	movs	r2, #0
 8000b76:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8000b7a:	481a      	ldr	r0, [pc, #104]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000b7c:	f000 fed9 	bl	8001932 <HAL_GPIO_WritePin>
                          |sb1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : sa1_Pin sa2_Pin sa3_Pin sa4_Pin
                           sa5_Pin sa6_Pin sa7_Pin e0_Pin
                           e1_Pin e2_Pin e3_Pin */
  GPIO_InitStruct.Pin = sa1_Pin|sa2_Pin|sa3_Pin|sa4_Pin
 8000b80:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 8000b84:	60bb      	str	r3, [r7, #8]
                          |sa5_Pin|sa6_Pin|sa7_Pin|e0_Pin
                          |e1_Pin|e2_Pin|e3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	4619      	mov	r1, r3
 8000b98:	4811      	ldr	r0, [pc, #68]	; (8000be0 <MX_GPIO_Init+0xbc>)
 8000b9a:	f000 fd39 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : b1_Pin b2_Pin b3_Pin */
  GPIO_InitStruct.Pin = b1_Pin|b2_Pin|b3_Pin;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000bb2:	f000 fd2d 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : sb2_Pin sb3_Pin sb4_Pin sb5_Pin
                           sb6_Pin sb7_Pin ra_Pin ya_Pin
                           ga_Pin rb_Pin yb_Pin gb_Pin
                           sb1_Pin */
  GPIO_InitStruct.Pin = sb2_Pin|sb3_Pin|sb4_Pin|sb5_Pin
 8000bb6:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000bba:	60bb      	str	r3, [r7, #8]
                          |sb6_Pin|sb7_Pin|ra_Pin|ya_Pin
                          |ga_Pin|rb_Pin|yb_Pin|gb_Pin
                          |sb1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_GPIO_Init+0xc0>)
 8000bd0:	f000 fd1e 	bl	8001610 <HAL_GPIO_Init>

}
 8000bd4:	bf00      	nop
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010800 	.word	0x40010800
 8000be4:	40010c00 	.word	0x40010c00

08000be8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	timerRun();
 8000bf0:	f000 f85a 	bl	8000ca8 <timerRun>
	getKeyInput();
 8000bf4:	f7ff faaa 	bl	800014c <getKeyInput>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <setTimer1>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;
int TIME_CYCLE = 10;
void setTimer1(int duration){
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIME_CYCLE;
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <setTimer1+0x28>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c1e:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <setTimer1+0x2c>)
 8000c20:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <setTimer1+0x30>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000034 	.word	0x20000034
 8000c38:	20000090 	.word	0x20000090
 8000c3c:	2000008c 	.word	0x2000008c

08000c40 <setTimer2>:
void setTimer2(int duration){
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIME_CYCLE;
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <setTimer2+0x28>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c52:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <setTimer2+0x2c>)
 8000c54:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <setTimer2+0x30>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000034 	.word	0x20000034
 8000c6c:	20000098 	.word	0x20000098
 8000c70:	20000094 	.word	0x20000094

08000c74 <setTimer3>:
void setTimer3(int duration){
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIME_CYCLE;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <setTimer3+0x28>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c86:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <setTimer3+0x2c>)
 8000c88:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <setTimer3+0x30>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000034 	.word	0x20000034
 8000ca0:	200000a0 	.word	0x200000a0
 8000ca4:	2000009c 	.word	0x2000009c

08000ca8 <timerRun>:
void timerRun(){
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <timerRun+0x6c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	dd0b      	ble.n	8000ccc <timerRun+0x24>
		timer1_counter--;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <timerRun+0x6c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <timerRun+0x6c>)
 8000cbc:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <timerRun+0x6c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	dc02      	bgt.n	8000ccc <timerRun+0x24>
			timer1_flag = 1;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <timerRun+0x70>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <timerRun+0x74>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	dd0b      	ble.n	8000cec <timerRun+0x44>
		timer2_counter--;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <timerRun+0x74>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <timerRun+0x74>)
 8000cdc:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <timerRun+0x74>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	dc02      	bgt.n	8000cec <timerRun+0x44>
			timer2_flag = 1;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <timerRun+0x78>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <timerRun+0x7c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	dd0b      	ble.n	8000d0c <timerRun+0x64>
		timer3_counter--;
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <timerRun+0x7c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <timerRun+0x7c>)
 8000cfc:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <timerRun+0x7c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	dc02      	bgt.n	8000d0c <timerRun+0x64>
			timer3_flag = 1;
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <timerRun+0x80>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	20000090 	.word	0x20000090
 8000d18:	2000008c 	.word	0x2000008c
 8000d1c:	20000098 	.word	0x20000098
 8000d20:	20000094 	.word	0x20000094
 8000d24:	200000a0 	.word	0x200000a0
 8000d28:	2000009c 	.word	0x2000009c

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	61d3      	str	r3, [r2, #28]
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_MspInit+0x60>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_MspInit+0x60>)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010000 	.word	0x40010000

08000d90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000da0:	d113      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_TIM_Base_MspInit+0x44>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_TIM_Base_MspInit+0x44>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	61d3      	str	r3, [r2, #28]
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_TIM_Base_MspInit+0x44>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	201c      	movs	r0, #28
 8000dc0:	f000 fbef 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dc4:	201c      	movs	r0, #28
 8000dc6:	f000 fc08 	bl	80015da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1e:	f000 facd 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <TIM2_IRQHandler+0x10>)
 8000e2e:	f001 fa35 	bl	800229c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000f8 	.word	0x200000f8

08000e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <display_7SEG>:
int green_row[2]= {0,0};
int red_column[2] = {0,0};
int yellow_column[2] = {0,0};
int green_column[2] = {0,0};

void display_7SEG(int index){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	switch (index) {
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <display_7SEG+0x16>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d017      	beq.n	8000e8c <display_7SEG+0x44>
			HAL_GPIO_WritePin(GPIOA, e1_Pin|e3_Pin ,0);
			display7_A(led_buffer[1]);
			display7_B(led_buffer[3]);
			break;
		default:
			break;
 8000e5c:	e02d      	b.n	8000eba <display_7SEG+0x72>
			HAL_GPIO_WritePin(GPIOA, e0_Pin|e2_Pin, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8000e64:	4817      	ldr	r0, [pc, #92]	; (8000ec4 <display_7SEG+0x7c>)
 8000e66:	f000 fd64 	bl	8001932 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, e1_Pin|e3_Pin ,1);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000e70:	4814      	ldr	r0, [pc, #80]	; (8000ec4 <display_7SEG+0x7c>)
 8000e72:	f000 fd5e 	bl	8001932 <HAL_GPIO_WritePin>
			display7_A(led_buffer[0]);
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <display_7SEG+0x80>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f994 	bl	80011a8 <display7_A>
			display7_B(led_buffer[2]);
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <display_7SEG+0x80>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f8eb 	bl	8001060 <display7_B>
			break;
 8000e8a:	e016      	b.n	8000eba <display_7SEG+0x72>
			HAL_GPIO_WritePin(GPIOA, e0_Pin|e2_Pin ,1);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8000e92:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <display_7SEG+0x7c>)
 8000e94:	f000 fd4d 	bl	8001932 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, e1_Pin|e3_Pin ,0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000e9e:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <display_7SEG+0x7c>)
 8000ea0:	f000 fd47 	bl	8001932 <HAL_GPIO_WritePin>
			display7_A(led_buffer[1]);
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <display_7SEG+0x80>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f97d 	bl	80011a8 <display7_A>
			display7_B(led_buffer[3]);
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <display_7SEG+0x80>)
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f8d4 	bl	8001060 <display7_B>
			break;
 8000eb8:	bf00      	nop
	}
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	200000e4 	.word	0x200000e4

08000ecc <set_traffic>:

void set_traffic(){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	tatLED();
 8000ed0:	f000 f8a8 	bl	8001024 <tatLED>
	status_row = RED_ROW;
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <set_traffic+0x80>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
	status_column = GREEN_COLUMN;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <set_traffic+0x84>)
 8000edc:	2210      	movs	r2, #16
 8000ede:	601a      	str	r2, [r3, #0]
	red_row[0] = red_column[0] = redt[0];
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <set_traffic+0x88>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <set_traffic+0x8c>)
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <set_traffic+0x8c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <set_traffic+0x90>)
 8000eee:	6013      	str	r3, [r2, #0]
	red_row[1] = red_column[1] = redt[1];
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <set_traffic+0x88>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <set_traffic+0x8c>)
 8000ef6:	6053      	str	r3, [r2, #4]
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <set_traffic+0x8c>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <set_traffic+0x90>)
 8000efe:	6053      	str	r3, [r2, #4]
	yellow_row[0] = yellow_column[0] = yellowt[0];
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <set_traffic+0x94>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <set_traffic+0x98>)
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <set_traffic+0x98>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a16      	ldr	r2, [pc, #88]	; (8000f68 <set_traffic+0x9c>)
 8000f0e:	6013      	str	r3, [r2, #0]
	yellow_row[1] = yellow_column[1] = yellowt[1];
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <set_traffic+0x94>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	4a13      	ldr	r2, [pc, #76]	; (8000f64 <set_traffic+0x98>)
 8000f16:	6053      	str	r3, [r2, #4]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <set_traffic+0x98>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <set_traffic+0x9c>)
 8000f1e:	6053      	str	r3, [r2, #4]
	green_row[0] = green_column[0] = greent[0];
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <set_traffic+0xa0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <set_traffic+0xa4>)
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <set_traffic+0xa4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a11      	ldr	r2, [pc, #68]	; (8000f74 <set_traffic+0xa8>)
 8000f2e:	6013      	str	r3, [r2, #0]
	green_row[1] = green_column[1] = greent[1];
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <set_traffic+0xa0>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <set_traffic+0xa4>)
 8000f36:	6053      	str	r3, [r2, #4]
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <set_traffic+0xa4>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <set_traffic+0xa8>)
 8000f3e:	6053      	str	r3, [r2, #4]
	counter = 0;
 8000f40:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <set_traffic+0xac>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000f4 	.word	0x200000f4
 8000f50:	200000e0 	.word	0x200000e0
 8000f54:	2000003c 	.word	0x2000003c
 8000f58:	200000bc 	.word	0x200000bc
 8000f5c:	200000a4 	.word	0x200000a4
 8000f60:	20000044 	.word	0x20000044
 8000f64:	200000c4 	.word	0x200000c4
 8000f68:	200000ac 	.word	0x200000ac
 8000f6c:	2000004c 	.word	0x2000004c
 8000f70:	200000cc 	.word	0x200000cc
 8000f74:	200000b4 	.word	0x200000b4
 8000f78:	20000088 	.word	0x20000088

08000f7c <setGR>:
void setGR(){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ga_Pin, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2120      	movs	r1, #32
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <setGR+0x1c>)
 8000f86:	f000 fcd4 	bl	8001932 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ra_Pin|ya_Pin, 1);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2118      	movs	r1, #24
 8000f8e:	4802      	ldr	r0, [pc, #8]	; (8000f98 <setGR+0x1c>)
 8000f90:	f000 fccf 	bl	8001932 <HAL_GPIO_WritePin>
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40010c00 	.word	0x40010c00

08000f9c <setRC>:
void setRC(){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, rb_Pin, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <setRC+0x20>)
 8000fa6:	f000 fcc4 	bl	8001932 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, yb_Pin|gb_Pin, 1);
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <setRC+0x20>)
 8000fb2:	f000 fcbe 	bl	8001932 <HAL_GPIO_WritePin>
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40010c00 	.word	0x40010c00

08000fc0 <setRR>:
void setRR(){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ra_Pin, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <setRR+0x1c>)
 8000fca:	f000 fcb2 	bl	8001932 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ya_Pin|ga_Pin, 1);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2130      	movs	r1, #48	; 0x30
 8000fd2:	4802      	ldr	r0, [pc, #8]	; (8000fdc <setRR+0x1c>)
 8000fd4:	f000 fcad 	bl	8001932 <HAL_GPIO_WritePin>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40010c00 	.word	0x40010c00

08000fe0 <setYR>:
void setYR(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ya_Pin, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	4804      	ldr	r0, [pc, #16]	; (8000ffc <setYR+0x1c>)
 8000fea:	f000 fca2 	bl	8001932 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ra_Pin|ga_Pin, 1);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2128      	movs	r1, #40	; 0x28
 8000ff2:	4802      	ldr	r0, [pc, #8]	; (8000ffc <setYR+0x1c>)
 8000ff4:	f000 fc9d 	bl	8001932 <HAL_GPIO_WritePin>
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40010c00 	.word	0x40010c00

08001000 <setGC>:
void setGC(){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, gb_Pin, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <setGC+0x20>)
 800100c:	f000 fc91 	bl	8001932 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, rb_Pin|yb_Pin, 1);
 8001010:	2201      	movs	r2, #1
 8001012:	21c0      	movs	r1, #192	; 0xc0
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <setGC+0x20>)
 8001016:	f000 fc8c 	bl	8001932 <HAL_GPIO_WritePin>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40010c00 	.word	0x40010c00

08001024 <tatLED>:

void tatLED(){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ra_Pin|rb_Pin|ya_Pin|yb_Pin|ga_Pin|gb_Pin, 1);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 800102e:	4802      	ldr	r0, [pc, #8]	; (8001038 <tatLED+0x14>)
 8001030:	f000 fc7f 	bl	8001932 <HAL_GPIO_WritePin>
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40010c00 	.word	0x40010c00

0800103c <setYC>:
void setYC(){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, yb_Pin, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <setYC+0x20>)
 8001046:	f000 fc74 	bl	8001932 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, rb_Pin|gb_Pin, 1);
 800104a:	2201      	movs	r2, #1
 800104c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <setYC+0x20>)
 8001052:	f000 fc6e 	bl	8001932 <HAL_GPIO_WritePin>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40010c00 	.word	0x40010c00

08001060 <display7_B>:

void display7_B(int num){
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10c      	bne.n	8001088 <display7_B+0x28>
		HAL_GPIO_WritePin(GPIOB, sb1_Pin|sb2_Pin|sb3_Pin|sb4_Pin|sb5_Pin|sb6_Pin, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 41fc 	mov.w	r1, #32256	; 0x7e00
 8001074:	484b      	ldr	r0, [pc, #300]	; (80011a4 <display7_B+0x144>)
 8001076:	f000 fc5c 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, sb7_Pin, 1);
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001080:	4848      	ldr	r0, [pc, #288]	; (80011a4 <display7_B+0x144>)
 8001082:	f000 fc56 	bl	8001932 <HAL_GPIO_WritePin>
	}
	else if(num == 9){
		HAL_GPIO_WritePin(GPIOB, sb1_Pin|sb7_Pin|sb4_Pin|sb2_Pin|sb3_Pin|sb6_Pin|sb2_Pin, 0);
		HAL_GPIO_WritePin(GPIOB, sb5_Pin, 1);
	}
}
 8001086:	e088      	b.n	800119a <display7_B+0x13a>
	else if(num == 1){
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d10c      	bne.n	80010a8 <display7_B+0x48>
		HAL_GPIO_WritePin(GPIOB, sb2_Pin|sb3_Pin, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001094:	4843      	ldr	r0, [pc, #268]	; (80011a4 <display7_B+0x144>)
 8001096:	f000 fc4c 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, sb1_Pin|sb7_Pin|sb4_Pin|sb5_Pin|sb6_Pin, 1);
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 4172 	mov.w	r1, #61952	; 0xf200
 80010a0:	4840      	ldr	r0, [pc, #256]	; (80011a4 <display7_B+0x144>)
 80010a2:	f000 fc46 	bl	8001932 <HAL_GPIO_WritePin>
}
 80010a6:	e078      	b.n	800119a <display7_B+0x13a>
	else if(num == 2){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d10c      	bne.n	80010c8 <display7_B+0x68>
		HAL_GPIO_WritePin(GPIOB, sb1_Pin|sb7_Pin|sb4_Pin|sb5_Pin|sb2_Pin, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 4136 	mov.w	r1, #46592	; 0xb600
 80010b4:	483b      	ldr	r0, [pc, #236]	; (80011a4 <display7_B+0x144>)
 80010b6:	f000 fc3c 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, sb6_Pin|sb3_Pin, 1);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80010c0:	4838      	ldr	r0, [pc, #224]	; (80011a4 <display7_B+0x144>)
 80010c2:	f000 fc36 	bl	8001932 <HAL_GPIO_WritePin>
}
 80010c6:	e068      	b.n	800119a <display7_B+0x13a>
	else if(num == 3){
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d10c      	bne.n	80010e8 <display7_B+0x88>
		HAL_GPIO_WritePin(GPIOB, sb1_Pin|sb7_Pin|sb4_Pin|sb2_Pin|sb3_Pin, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
 80010d4:	4833      	ldr	r0, [pc, #204]	; (80011a4 <display7_B+0x144>)
 80010d6:	f000 fc2c 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, sb5_Pin|sb6_Pin, 1);
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80010e0:	4830      	ldr	r0, [pc, #192]	; (80011a4 <display7_B+0x144>)
 80010e2:	f000 fc26 	bl	8001932 <HAL_GPIO_WritePin>
}
 80010e6:	e058      	b.n	800119a <display7_B+0x13a>
	else if(num == 4){
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d10c      	bne.n	8001108 <display7_B+0xa8>
		HAL_GPIO_WritePin(GPIOB, sb6_Pin|sb2_Pin|sb3_Pin|sb7_Pin, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 414c 	mov.w	r1, #52224	; 0xcc00
 80010f4:	482b      	ldr	r0, [pc, #172]	; (80011a4 <display7_B+0x144>)
 80010f6:	f000 fc1c 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, sb1_Pin|sb4_Pin|sb5_Pin, 1);
 80010fa:	2201      	movs	r2, #1
 80010fc:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 8001100:	4828      	ldr	r0, [pc, #160]	; (80011a4 <display7_B+0x144>)
 8001102:	f000 fc16 	bl	8001932 <HAL_GPIO_WritePin>
}
 8001106:	e048      	b.n	800119a <display7_B+0x13a>
	else if(num == 5){
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b05      	cmp	r3, #5
 800110c:	d10c      	bne.n	8001128 <display7_B+0xc8>
		HAL_GPIO_WritePin(GPIOB, sb1_Pin|sb7_Pin|sb4_Pin|sb6_Pin|sb3_Pin, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 415a 	mov.w	r1, #55808	; 0xda00
 8001114:	4823      	ldr	r0, [pc, #140]	; (80011a4 <display7_B+0x144>)
 8001116:	f000 fc0c 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, sb5_Pin|sb2_Pin, 1);
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8001120:	4820      	ldr	r0, [pc, #128]	; (80011a4 <display7_B+0x144>)
 8001122:	f000 fc06 	bl	8001932 <HAL_GPIO_WritePin>
}
 8001126:	e038      	b.n	800119a <display7_B+0x13a>
	else if(num == 6){
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b06      	cmp	r3, #6
 800112c:	d10c      	bne.n	8001148 <display7_B+0xe8>
		HAL_GPIO_WritePin(GPIOB, sb1_Pin|sb7_Pin|sb4_Pin|sb5_Pin|sb6_Pin|sb3_Pin, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 8001134:	481b      	ldr	r0, [pc, #108]	; (80011a4 <display7_B+0x144>)
 8001136:	f000 fbfc 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, sb2_Pin, 1);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001140:	4818      	ldr	r0, [pc, #96]	; (80011a4 <display7_B+0x144>)
 8001142:	f000 fbf6 	bl	8001932 <HAL_GPIO_WritePin>
}
 8001146:	e028      	b.n	800119a <display7_B+0x13a>
	else if(num == 7){
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b07      	cmp	r3, #7
 800114c:	d10c      	bne.n	8001168 <display7_B+0x108>
		HAL_GPIO_WritePin(GPIOB, sb1_Pin|sb2_Pin|sb3_Pin, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <display7_B+0x144>)
 8001156:	f000 fbec 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, sb7_Pin|sb4_Pin|sb5_Pin|sb6_Pin, 1);
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001160:	4810      	ldr	r0, [pc, #64]	; (80011a4 <display7_B+0x144>)
 8001162:	f000 fbe6 	bl	8001932 <HAL_GPIO_WritePin>
}
 8001166:	e018      	b.n	800119a <display7_B+0x13a>
	else if(num == 8){
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b08      	cmp	r3, #8
 800116c:	d106      	bne.n	800117c <display7_B+0x11c>
		HAL_GPIO_WritePin(GPIOB, sb1_Pin|sb7_Pin|sb4_Pin|sb5_Pin|sb6_Pin|sb2_Pin|sb3_Pin, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <display7_B+0x144>)
 8001176:	f000 fbdc 	bl	8001932 <HAL_GPIO_WritePin>
}
 800117a:	e00e      	b.n	800119a <display7_B+0x13a>
	else if(num == 9){
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b09      	cmp	r3, #9
 8001180:	d10b      	bne.n	800119a <display7_B+0x13a>
		HAL_GPIO_WritePin(GPIOB, sb1_Pin|sb7_Pin|sb4_Pin|sb2_Pin|sb3_Pin|sb6_Pin|sb2_Pin, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 415e 	mov.w	r1, #56832	; 0xde00
 8001188:	4806      	ldr	r0, [pc, #24]	; (80011a4 <display7_B+0x144>)
 800118a:	f000 fbd2 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, sb5_Pin, 1);
 800118e:	2201      	movs	r2, #1
 8001190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <display7_B+0x144>)
 8001196:	f000 fbcc 	bl	8001932 <HAL_GPIO_WritePin>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40010c00 	.word	0x40010c00

080011a8 <display7_A>:
void display7_A(int num){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	if(num == 0){
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10c      	bne.n	80011d0 <display7_A+0x28>
		HAL_GPIO_WritePin(GPIOA, sa1_Pin|sa2_Pin|sa3_Pin|sa4_Pin|sa5_Pin|sa6_Pin, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80011bc:	4848      	ldr	r0, [pc, #288]	; (80012e0 <display7_A+0x138>)
 80011be:	f000 fbb8 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, sa7_Pin, 1);
 80011c2:	2201      	movs	r2, #1
 80011c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c8:	4845      	ldr	r0, [pc, #276]	; (80012e0 <display7_A+0x138>)
 80011ca:	f000 fbb2 	bl	8001932 <HAL_GPIO_WritePin>
	}
	else if(num == 9){
		HAL_GPIO_WritePin(GPIOA, sa1_Pin|sa7_Pin|sa4_Pin|sa2_Pin|sa3_Pin|sa6_Pin|sa2_Pin, 0);
		HAL_GPIO_WritePin(GPIOA, sa5_Pin, 1);
	}
}
 80011ce:	e082      	b.n	80012d6 <display7_A+0x12e>
	else if(num == 1){
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d10b      	bne.n	80011ee <display7_A+0x46>
		HAL_GPIO_WritePin(GPIOA, sa2_Pin|sa3_Pin, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2130      	movs	r1, #48	; 0x30
 80011da:	4841      	ldr	r0, [pc, #260]	; (80012e0 <display7_A+0x138>)
 80011dc:	f000 fba9 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, sa1_Pin|sa7_Pin|sa4_Pin|sa5_Pin|sa6_Pin, 1);
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 80011e6:	483e      	ldr	r0, [pc, #248]	; (80012e0 <display7_A+0x138>)
 80011e8:	f000 fba3 	bl	8001932 <HAL_GPIO_WritePin>
}
 80011ec:	e073      	b.n	80012d6 <display7_A+0x12e>
	else if(num == 2){
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d10c      	bne.n	800120e <display7_A+0x66>
		HAL_GPIO_WritePin(GPIOA, sa1_Pin|sa7_Pin|sa4_Pin|sa5_Pin|sa2_Pin, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 80011fa:	4839      	ldr	r0, [pc, #228]	; (80012e0 <display7_A+0x138>)
 80011fc:	f000 fb99 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, sa6_Pin|sa3_Pin, 1);
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001206:	4836      	ldr	r0, [pc, #216]	; (80012e0 <display7_A+0x138>)
 8001208:	f000 fb93 	bl	8001932 <HAL_GPIO_WritePin>
}
 800120c:	e063      	b.n	80012d6 <display7_A+0x12e>
	else if(num == 3){
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b03      	cmp	r3, #3
 8001212:	d10c      	bne.n	800122e <display7_A+0x86>
		HAL_GPIO_WritePin(GPIOA, sa1_Pin|sa7_Pin|sa4_Pin|sa2_Pin|sa3_Pin, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 711e 	mov.w	r1, #632	; 0x278
 800121a:	4831      	ldr	r0, [pc, #196]	; (80012e0 <display7_A+0x138>)
 800121c:	f000 fb89 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, sa5_Pin|sa6_Pin, 1);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001226:	482e      	ldr	r0, [pc, #184]	; (80012e0 <display7_A+0x138>)
 8001228:	f000 fb83 	bl	8001932 <HAL_GPIO_WritePin>
}
 800122c:	e053      	b.n	80012d6 <display7_A+0x12e>
	else if(num == 4){
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d10b      	bne.n	800124c <display7_A+0xa4>
		HAL_GPIO_WritePin(GPIOA, sa6_Pin|sa2_Pin|sa3_Pin|sa7_Pin, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 714c 	mov.w	r1, #816	; 0x330
 800123a:	4829      	ldr	r0, [pc, #164]	; (80012e0 <display7_A+0x138>)
 800123c:	f000 fb79 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, sa1_Pin|sa4_Pin|sa5_Pin, 1);
 8001240:	2201      	movs	r2, #1
 8001242:	21c8      	movs	r1, #200	; 0xc8
 8001244:	4826      	ldr	r0, [pc, #152]	; (80012e0 <display7_A+0x138>)
 8001246:	f000 fb74 	bl	8001932 <HAL_GPIO_WritePin>
}
 800124a:	e044      	b.n	80012d6 <display7_A+0x12e>
	else if(num == 5){
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b05      	cmp	r3, #5
 8001250:	d10b      	bne.n	800126a <display7_A+0xc2>
		HAL_GPIO_WritePin(GPIOA, sa1_Pin|sa7_Pin|sa4_Pin|sa6_Pin|sa3_Pin, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 715a 	mov.w	r1, #872	; 0x368
 8001258:	4821      	ldr	r0, [pc, #132]	; (80012e0 <display7_A+0x138>)
 800125a:	f000 fb6a 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, sa5_Pin|sa2_Pin, 1);
 800125e:	2201      	movs	r2, #1
 8001260:	2190      	movs	r1, #144	; 0x90
 8001262:	481f      	ldr	r0, [pc, #124]	; (80012e0 <display7_A+0x138>)
 8001264:	f000 fb65 	bl	8001932 <HAL_GPIO_WritePin>
}
 8001268:	e035      	b.n	80012d6 <display7_A+0x12e>
	else if(num == 6){
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b06      	cmp	r3, #6
 800126e:	d10b      	bne.n	8001288 <display7_A+0xe0>
		HAL_GPIO_WritePin(GPIOA, sa1_Pin|sa7_Pin|sa4_Pin|sa5_Pin|sa6_Pin|sa3_Pin, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001276:	481a      	ldr	r0, [pc, #104]	; (80012e0 <display7_A+0x138>)
 8001278:	f000 fb5b 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, sa2_Pin, 1);
 800127c:	2201      	movs	r2, #1
 800127e:	2110      	movs	r1, #16
 8001280:	4817      	ldr	r0, [pc, #92]	; (80012e0 <display7_A+0x138>)
 8001282:	f000 fb56 	bl	8001932 <HAL_GPIO_WritePin>
}
 8001286:	e026      	b.n	80012d6 <display7_A+0x12e>
	else if(num == 7){
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b07      	cmp	r3, #7
 800128c:	d10b      	bne.n	80012a6 <display7_A+0xfe>
		HAL_GPIO_WritePin(GPIOA, sa1_Pin|sa2_Pin|sa3_Pin, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2138      	movs	r1, #56	; 0x38
 8001292:	4813      	ldr	r0, [pc, #76]	; (80012e0 <display7_A+0x138>)
 8001294:	f000 fb4d 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, sa7_Pin|sa4_Pin|sa5_Pin|sa6_Pin, 1);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800129e:	4810      	ldr	r0, [pc, #64]	; (80012e0 <display7_A+0x138>)
 80012a0:	f000 fb47 	bl	8001932 <HAL_GPIO_WritePin>
}
 80012a4:	e017      	b.n	80012d6 <display7_A+0x12e>
	else if(num == 8){
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d106      	bne.n	80012ba <display7_A+0x112>
		HAL_GPIO_WritePin(GPIOA, sa1_Pin|sa7_Pin|sa4_Pin|sa5_Pin|sa6_Pin|sa2_Pin|sa3_Pin, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80012b2:	480b      	ldr	r0, [pc, #44]	; (80012e0 <display7_A+0x138>)
 80012b4:	f000 fb3d 	bl	8001932 <HAL_GPIO_WritePin>
}
 80012b8:	e00d      	b.n	80012d6 <display7_A+0x12e>
	else if(num == 9){
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b09      	cmp	r3, #9
 80012be:	d10a      	bne.n	80012d6 <display7_A+0x12e>
		HAL_GPIO_WritePin(GPIOA, sa1_Pin|sa7_Pin|sa4_Pin|sa2_Pin|sa3_Pin|sa6_Pin|sa2_Pin, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	f44f 715e 	mov.w	r1, #888	; 0x378
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <display7_A+0x138>)
 80012c8:	f000 fb33 	bl	8001932 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, sa5_Pin, 1);
 80012cc:	2201      	movs	r2, #1
 80012ce:	2180      	movs	r1, #128	; 0x80
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <display7_A+0x138>)
 80012d2:	f000 fb2e 	bl	8001932 <HAL_GPIO_WritePin>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40010800 	.word	0x40010800

080012e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012e6:	490d      	ldr	r1, [pc, #52]	; (800131c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012fc:	4c0a      	ldr	r4, [pc, #40]	; (8001328 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800130a:	f7ff fd97 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130e:	f001 fb0d 	bl	800292c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001312:	f7ff fb67 	bl	80009e4 <main>
  bx lr
 8001316:	4770      	bx	lr
  ldr r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800131c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001320:	080029c4 	.word	0x080029c4
  ldr r2, =_sbss
 8001324:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001328:	20000144 	.word	0x20000144

0800132c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC1_2_IRQHandler>
	...

08001330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_Init+0x28>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_Init+0x28>)
 800133a:	f043 0310 	orr.w	r3, r3, #16
 800133e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001340:	2003      	movs	r0, #3
 8001342:	f000 f923 	bl	800158c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001346:	200f      	movs	r0, #15
 8001348:	f000 f808 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800134c:	f7ff fcee 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40022000 	.word	0x40022000

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x54>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_InitTick+0x58>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	fbb3 f3f1 	udiv	r3, r3, r1
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f93b 	bl	80015f6 <HAL_SYSTICK_Config>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e00e      	b.n	80013a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b0f      	cmp	r3, #15
 800138e:	d80a      	bhi.n	80013a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001390:	2200      	movs	r2, #0
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f000 f903 	bl	80015a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800139c:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <HAL_InitTick+0x5c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e000      	b.n	80013a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000038 	.word	0x20000038
 80013b4:	20000058 	.word	0x20000058
 80013b8:	20000054 	.word	0x20000054

080013bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_IncTick+0x1c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_IncTick+0x20>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a03      	ldr	r2, [pc, #12]	; (80013dc <HAL_IncTick+0x20>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	20000058 	.word	0x20000058
 80013dc:	20000140 	.word	0x20000140

080013e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <HAL_GetTick+0x10>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	20000140 	.word	0x20000140

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0b      	blt.n	8001482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4906      	ldr	r1, [pc, #24]	; (800148c <__NVIC_EnableIRQ+0x34>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0a      	blt.n	80014ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	490c      	ldr	r1, [pc, #48]	; (80014dc <__NVIC_SetPriority+0x4c>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b8:	e00a      	b.n	80014d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4908      	ldr	r1, [pc, #32]	; (80014e0 <__NVIC_SetPriority+0x50>)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	3b04      	subs	r3, #4
 80014c8:	0112      	lsls	r2, r2, #4
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	761a      	strb	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f1c3 0307 	rsb	r3, r3, #7
 80014fe:	2b04      	cmp	r3, #4
 8001500:	bf28      	it	cs
 8001502:	2304      	movcs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3304      	adds	r3, #4
 800150a:	2b06      	cmp	r3, #6
 800150c:	d902      	bls.n	8001514 <NVIC_EncodePriority+0x30>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3b03      	subs	r3, #3
 8001512:	e000      	b.n	8001516 <NVIC_EncodePriority+0x32>
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43d9      	mvns	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	4313      	orrs	r3, r2
         );
}
 800153e:	4618      	mov	r0, r3
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001558:	d301      	bcc.n	800155e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155a:	2301      	movs	r3, #1
 800155c:	e00f      	b.n	800157e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <SysTick_Config+0x40>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001566:	210f      	movs	r1, #15
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f7ff ff90 	bl	8001490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <SysTick_Config+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <SysTick_Config+0x40>)
 8001578:	2207      	movs	r2, #7
 800157a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	e000e010 	.word	0xe000e010

0800158c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff2d 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b4:	f7ff ff42 	bl	800143c <__NVIC_GetPriorityGrouping>
 80015b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	6978      	ldr	r0, [r7, #20]
 80015c0:	f7ff ff90 	bl	80014e4 <NVIC_EncodePriority>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff5f 	bl	8001490 <__NVIC_SetPriority>
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff35 	bl	8001458 <__NVIC_EnableIRQ>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffa2 	bl	8001548 <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001610:	b480      	push	{r7}
 8001612:	b08b      	sub	sp, #44	; 0x2c
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001622:	e148      	b.n	80018b6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001624:	2201      	movs	r2, #1
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	429a      	cmp	r2, r3
 800163e:	f040 8137 	bne.w	80018b0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4aa3      	ldr	r2, [pc, #652]	; (80018d4 <HAL_GPIO_Init+0x2c4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d05e      	beq.n	800170a <HAL_GPIO_Init+0xfa>
 800164c:	4aa1      	ldr	r2, [pc, #644]	; (80018d4 <HAL_GPIO_Init+0x2c4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d875      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 8001652:	4aa1      	ldr	r2, [pc, #644]	; (80018d8 <HAL_GPIO_Init+0x2c8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d058      	beq.n	800170a <HAL_GPIO_Init+0xfa>
 8001658:	4a9f      	ldr	r2, [pc, #636]	; (80018d8 <HAL_GPIO_Init+0x2c8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d86f      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 800165e:	4a9f      	ldr	r2, [pc, #636]	; (80018dc <HAL_GPIO_Init+0x2cc>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d052      	beq.n	800170a <HAL_GPIO_Init+0xfa>
 8001664:	4a9d      	ldr	r2, [pc, #628]	; (80018dc <HAL_GPIO_Init+0x2cc>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d869      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 800166a:	4a9d      	ldr	r2, [pc, #628]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d04c      	beq.n	800170a <HAL_GPIO_Init+0xfa>
 8001670:	4a9b      	ldr	r2, [pc, #620]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d863      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 8001676:	4a9b      	ldr	r2, [pc, #620]	; (80018e4 <HAL_GPIO_Init+0x2d4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d046      	beq.n	800170a <HAL_GPIO_Init+0xfa>
 800167c:	4a99      	ldr	r2, [pc, #612]	; (80018e4 <HAL_GPIO_Init+0x2d4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d85d      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 8001682:	2b12      	cmp	r3, #18
 8001684:	d82a      	bhi.n	80016dc <HAL_GPIO_Init+0xcc>
 8001686:	2b12      	cmp	r3, #18
 8001688:	d859      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <HAL_GPIO_Init+0x80>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	0800170b 	.word	0x0800170b
 8001694:	080016e5 	.word	0x080016e5
 8001698:	080016f7 	.word	0x080016f7
 800169c:	08001739 	.word	0x08001739
 80016a0:	0800173f 	.word	0x0800173f
 80016a4:	0800173f 	.word	0x0800173f
 80016a8:	0800173f 	.word	0x0800173f
 80016ac:	0800173f 	.word	0x0800173f
 80016b0:	0800173f 	.word	0x0800173f
 80016b4:	0800173f 	.word	0x0800173f
 80016b8:	0800173f 	.word	0x0800173f
 80016bc:	0800173f 	.word	0x0800173f
 80016c0:	0800173f 	.word	0x0800173f
 80016c4:	0800173f 	.word	0x0800173f
 80016c8:	0800173f 	.word	0x0800173f
 80016cc:	0800173f 	.word	0x0800173f
 80016d0:	0800173f 	.word	0x0800173f
 80016d4:	080016ed 	.word	0x080016ed
 80016d8:	08001701 	.word	0x08001701
 80016dc:	4a82      	ldr	r2, [pc, #520]	; (80018e8 <HAL_GPIO_Init+0x2d8>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d013      	beq.n	800170a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016e2:	e02c      	b.n	800173e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	623b      	str	r3, [r7, #32]
          break;
 80016ea:	e029      	b.n	8001740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	3304      	adds	r3, #4
 80016f2:	623b      	str	r3, [r7, #32]
          break;
 80016f4:	e024      	b.n	8001740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	3308      	adds	r3, #8
 80016fc:	623b      	str	r3, [r7, #32]
          break;
 80016fe:	e01f      	b.n	8001740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	330c      	adds	r3, #12
 8001706:	623b      	str	r3, [r7, #32]
          break;
 8001708:	e01a      	b.n	8001740 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d102      	bne.n	8001718 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001712:	2304      	movs	r3, #4
 8001714:	623b      	str	r3, [r7, #32]
          break;
 8001716:	e013      	b.n	8001740 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001720:	2308      	movs	r3, #8
 8001722:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	611a      	str	r2, [r3, #16]
          break;
 800172a:	e009      	b.n	8001740 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800172c:	2308      	movs	r3, #8
 800172e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	615a      	str	r2, [r3, #20]
          break;
 8001736:	e003      	b.n	8001740 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
          break;
 800173c:	e000      	b.n	8001740 <HAL_GPIO_Init+0x130>
          break;
 800173e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	2bff      	cmp	r3, #255	; 0xff
 8001744:	d801      	bhi.n	800174a <HAL_GPIO_Init+0x13a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	e001      	b.n	800174e <HAL_GPIO_Init+0x13e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3304      	adds	r3, #4
 800174e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	2bff      	cmp	r3, #255	; 0xff
 8001754:	d802      	bhi.n	800175c <HAL_GPIO_Init+0x14c>
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	e002      	b.n	8001762 <HAL_GPIO_Init+0x152>
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	3b08      	subs	r3, #8
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	210f      	movs	r1, #15
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	401a      	ands	r2, r3
 8001774:	6a39      	ldr	r1, [r7, #32]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	431a      	orrs	r2, r3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 8090 	beq.w	80018b0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001790:	4b56      	ldr	r3, [pc, #344]	; (80018ec <HAL_GPIO_Init+0x2dc>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a55      	ldr	r2, [pc, #340]	; (80018ec <HAL_GPIO_Init+0x2dc>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b53      	ldr	r3, [pc, #332]	; (80018ec <HAL_GPIO_Init+0x2dc>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017a8:	4a51      	ldr	r2, [pc, #324]	; (80018f0 <HAL_GPIO_Init+0x2e0>)
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	089b      	lsrs	r3, r3, #2
 80017ae:	3302      	adds	r3, #2
 80017b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	220f      	movs	r2, #15
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	4013      	ands	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a49      	ldr	r2, [pc, #292]	; (80018f4 <HAL_GPIO_Init+0x2e4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d00d      	beq.n	80017f0 <HAL_GPIO_Init+0x1e0>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a48      	ldr	r2, [pc, #288]	; (80018f8 <HAL_GPIO_Init+0x2e8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d007      	beq.n	80017ec <HAL_GPIO_Init+0x1dc>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a47      	ldr	r2, [pc, #284]	; (80018fc <HAL_GPIO_Init+0x2ec>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d101      	bne.n	80017e8 <HAL_GPIO_Init+0x1d8>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e004      	b.n	80017f2 <HAL_GPIO_Init+0x1e2>
 80017e8:	2303      	movs	r3, #3
 80017ea:	e002      	b.n	80017f2 <HAL_GPIO_Init+0x1e2>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <HAL_GPIO_Init+0x1e2>
 80017f0:	2300      	movs	r3, #0
 80017f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f4:	f002 0203 	and.w	r2, r2, #3
 80017f8:	0092      	lsls	r2, r2, #2
 80017fa:	4093      	lsls	r3, r2
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001802:	493b      	ldr	r1, [pc, #236]	; (80018f0 <HAL_GPIO_Init+0x2e0>)
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800181c:	4b38      	ldr	r3, [pc, #224]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4937      	ldr	r1, [pc, #220]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800182a:	4b35      	ldr	r3, [pc, #212]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	43db      	mvns	r3, r3
 8001832:	4933      	ldr	r1, [pc, #204]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 8001834:	4013      	ands	r3, r2
 8001836:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001844:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	492d      	ldr	r1, [pc, #180]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001852:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	43db      	mvns	r3, r3
 800185a:	4929      	ldr	r1, [pc, #164]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 800185c:	4013      	ands	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800186c:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	4923      	ldr	r1, [pc, #140]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	608b      	str	r3, [r1, #8]
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800187a:	4b21      	ldr	r3, [pc, #132]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	43db      	mvns	r3, r3
 8001882:	491f      	ldr	r1, [pc, #124]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 8001884:	4013      	ands	r3, r2
 8001886:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001894:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	4919      	ldr	r1, [pc, #100]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	60cb      	str	r3, [r1, #12]
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	4915      	ldr	r1, [pc, #84]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	3301      	adds	r3, #1
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	fa22 f303 	lsr.w	r3, r2, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f47f aeaf 	bne.w	8001624 <HAL_GPIO_Init+0x14>
  }
}
 80018c6:	bf00      	nop
 80018c8:	bf00      	nop
 80018ca:	372c      	adds	r7, #44	; 0x2c
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	10320000 	.word	0x10320000
 80018d8:	10310000 	.word	0x10310000
 80018dc:	10220000 	.word	0x10220000
 80018e0:	10210000 	.word	0x10210000
 80018e4:	10120000 	.word	0x10120000
 80018e8:	10110000 	.word	0x10110000
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010000 	.word	0x40010000
 80018f4:	40010800 	.word	0x40010800
 80018f8:	40010c00 	.word	0x40010c00
 80018fc:	40011000 	.word	0x40011000
 8001900:	40010400 	.word	0x40010400

08001904 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	887b      	ldrh	r3, [r7, #2]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	e001      	b.n	8001926 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	807b      	strh	r3, [r7, #2]
 800193e:	4613      	mov	r3, r2
 8001940:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001942:	787b      	ldrb	r3, [r7, #1]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001948:	887a      	ldrh	r2, [r7, #2]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800194e:	e003      	b.n	8001958 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	041a      	lsls	r2, r3, #16
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	611a      	str	r2, [r3, #16]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr

08001962 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001974:	887a      	ldrh	r2, [r7, #2]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4013      	ands	r3, r2
 800197a:	041a      	lsls	r2, r3, #16
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	43d9      	mvns	r1, r3
 8001980:	887b      	ldrh	r3, [r7, #2]
 8001982:	400b      	ands	r3, r1
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	611a      	str	r2, [r3, #16]
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e26c      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 8087 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019b4:	4b92      	ldr	r3, [pc, #584]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d00c      	beq.n	80019da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c0:	4b8f      	ldr	r3, [pc, #572]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d112      	bne.n	80019f2 <HAL_RCC_OscConfig+0x5e>
 80019cc:	4b8c      	ldr	r3, [pc, #560]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d8:	d10b      	bne.n	80019f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019da:	4b89      	ldr	r3, [pc, #548]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d06c      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x12c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d168      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e246      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x76>
 80019fc:	4b80      	ldr	r3, [pc, #512]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a7f      	ldr	r2, [pc, #508]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	e02e      	b.n	8001a68 <HAL_RCC_OscConfig+0xd4>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x98>
 8001a12:	4b7b      	ldr	r3, [pc, #492]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a7a      	ldr	r2, [pc, #488]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b78      	ldr	r3, [pc, #480]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a77      	ldr	r2, [pc, #476]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e01d      	b.n	8001a68 <HAL_RCC_OscConfig+0xd4>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0xbc>
 8001a36:	4b72      	ldr	r3, [pc, #456]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a71      	ldr	r2, [pc, #452]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	4b6f      	ldr	r3, [pc, #444]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a6e      	ldr	r2, [pc, #440]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0xd4>
 8001a50:	4b6b      	ldr	r3, [pc, #428]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a6a      	ldr	r2, [pc, #424]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b68      	ldr	r3, [pc, #416]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a67      	ldr	r2, [pc, #412]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d013      	beq.n	8001a98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff fcb6 	bl	80013e0 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a78:	f7ff fcb2 	bl	80013e0 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	; 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e1fa      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	4b5d      	ldr	r3, [pc, #372]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0xe4>
 8001a96:	e014      	b.n	8001ac2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff fca2 	bl	80013e0 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7ff fc9e 	bl	80013e0 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	; 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e1e6      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	4b53      	ldr	r3, [pc, #332]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x10c>
 8001abe:	e000      	b.n	8001ac2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d063      	beq.n	8001b96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ace:	4b4c      	ldr	r3, [pc, #304]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00b      	beq.n	8001af2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ada:	4b49      	ldr	r3, [pc, #292]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d11c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x18c>
 8001ae6:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d116      	bne.n	8001b20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_RCC_OscConfig+0x176>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d001      	beq.n	8001b0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e1ba      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4939      	ldr	r1, [pc, #228]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1e:	e03a      	b.n	8001b96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b28:	4b36      	ldr	r3, [pc, #216]	; (8001c04 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2e:	f7ff fc57 	bl	80013e0 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b36:	f7ff fc53 	bl	80013e0 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e19b      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	4b2d      	ldr	r3, [pc, #180]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b54:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4927      	ldr	r1, [pc, #156]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]
 8001b68:	e015      	b.n	8001b96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6a:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff fc36 	bl	80013e0 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b78:	f7ff fc32 	bl	80013e0 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e17a      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d03a      	beq.n	8001c18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d019      	beq.n	8001bde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <HAL_RCC_OscConfig+0x274>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb0:	f7ff fc16 	bl	80013e0 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb8:	f7ff fc12 	bl	80013e0 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e15a      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f000 faa6 	bl	8002128 <RCC_Delay>
 8001bdc:	e01c      	b.n	8001c18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_RCC_OscConfig+0x274>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be4:	f7ff fbfc 	bl	80013e0 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bea:	e00f      	b.n	8001c0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bec:	f7ff fbf8 	bl	80013e0 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d908      	bls.n	8001c0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e140      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000
 8001c04:	42420000 	.word	0x42420000
 8001c08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0c:	4b9e      	ldr	r3, [pc, #632]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1e9      	bne.n	8001bec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80a6 	beq.w	8001d72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2a:	4b97      	ldr	r3, [pc, #604]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10d      	bne.n	8001c52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	4b94      	ldr	r3, [pc, #592]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	4a93      	ldr	r2, [pc, #588]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c40:	61d3      	str	r3, [r2, #28]
 8001c42:	4b91      	ldr	r3, [pc, #580]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c52:	4b8e      	ldr	r3, [pc, #568]	; (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d118      	bne.n	8001c90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c5e:	4b8b      	ldr	r3, [pc, #556]	; (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a8a      	ldr	r2, [pc, #552]	; (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6a:	f7ff fbb9 	bl	80013e0 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c72:	f7ff fbb5 	bl	80013e0 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b64      	cmp	r3, #100	; 0x64
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e0fd      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	4b81      	ldr	r3, [pc, #516]	; (8001e8c <HAL_RCC_OscConfig+0x4f8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x312>
 8001c98:	4b7b      	ldr	r3, [pc, #492]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a7a      	ldr	r2, [pc, #488]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6213      	str	r3, [r2, #32]
 8001ca4:	e02d      	b.n	8001d02 <HAL_RCC_OscConfig+0x36e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x334>
 8001cae:	4b76      	ldr	r3, [pc, #472]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4a75      	ldr	r2, [pc, #468]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	6213      	str	r3, [r2, #32]
 8001cba:	4b73      	ldr	r3, [pc, #460]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a72      	ldr	r2, [pc, #456]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	f023 0304 	bic.w	r3, r3, #4
 8001cc4:	6213      	str	r3, [r2, #32]
 8001cc6:	e01c      	b.n	8001d02 <HAL_RCC_OscConfig+0x36e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	d10c      	bne.n	8001cea <HAL_RCC_OscConfig+0x356>
 8001cd0:	4b6d      	ldr	r3, [pc, #436]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a6c      	ldr	r2, [pc, #432]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4a69      	ldr	r2, [pc, #420]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6213      	str	r3, [r2, #32]
 8001ce8:	e00b      	b.n	8001d02 <HAL_RCC_OscConfig+0x36e>
 8001cea:	4b67      	ldr	r3, [pc, #412]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a66      	ldr	r2, [pc, #408]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	6213      	str	r3, [r2, #32]
 8001cf6:	4b64      	ldr	r3, [pc, #400]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4a63      	ldr	r2, [pc, #396]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	f023 0304 	bic.w	r3, r3, #4
 8001d00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d015      	beq.n	8001d36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fb69 	bl	80013e0 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7ff fb65 	bl	80013e0 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e0ab      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d28:	4b57      	ldr	r3, [pc, #348]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0ee      	beq.n	8001d12 <HAL_RCC_OscConfig+0x37e>
 8001d34:	e014      	b.n	8001d60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d36:	f7ff fb53 	bl	80013e0 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3c:	e00a      	b.n	8001d54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3e:	f7ff fb4f 	bl	80013e0 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e095      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d54:	4b4c      	ldr	r3, [pc, #304]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1ee      	bne.n	8001d3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d105      	bne.n	8001d72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d66:	4b48      	ldr	r3, [pc, #288]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a47      	ldr	r2, [pc, #284]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8081 	beq.w	8001e7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d7c:	4b42      	ldr	r3, [pc, #264]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d061      	beq.n	8001e4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d146      	bne.n	8001e1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d90:	4b3f      	ldr	r3, [pc, #252]	; (8001e90 <HAL_RCC_OscConfig+0x4fc>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7ff fb23 	bl	80013e0 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7ff fb1f 	bl	80013e0 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e067      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db0:	4b35      	ldr	r3, [pc, #212]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f0      	bne.n	8001d9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc4:	d108      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dc6:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	492d      	ldr	r1, [pc, #180]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd8:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a19      	ldr	r1, [r3, #32]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	430b      	orrs	r3, r1
 8001dea:	4927      	ldr	r1, [pc, #156]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_RCC_OscConfig+0x4fc>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7ff faf3 	bl	80013e0 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7ff faef 	bl	80013e0 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e037      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x46a>
 8001e1c:	e02f      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <HAL_RCC_OscConfig+0x4fc>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff fadc 	bl	80013e0 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7ff fad8 	bl	80013e0 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e020      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x498>
 8001e4a:	e018      	b.n	8001e7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e013      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d106      	bne.n	8001e7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40007000 	.word	0x40007000
 8001e90:	42420060 	.word	0x42420060

08001e94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0d0      	b.n	800204a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b6a      	ldr	r3, [pc, #424]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d910      	bls.n	8001ed8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b67      	ldr	r3, [pc, #412]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 0207 	bic.w	r2, r3, #7
 8001ebe:	4965      	ldr	r1, [pc, #404]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b63      	ldr	r3, [pc, #396]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0b8      	b.n	800204a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d020      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef0:	4b59      	ldr	r3, [pc, #356]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a58      	ldr	r2, [pc, #352]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001efa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f08:	4b53      	ldr	r3, [pc, #332]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4a52      	ldr	r2, [pc, #328]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f14:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	494d      	ldr	r1, [pc, #308]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d040      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	4b47      	ldr	r3, [pc, #284]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d115      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e07f      	b.n	800204a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f52:	4b41      	ldr	r3, [pc, #260]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d109      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e073      	b.n	800204a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e06b      	b.n	800204a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f72:	4b39      	ldr	r3, [pc, #228]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f023 0203 	bic.w	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4936      	ldr	r1, [pc, #216]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f84:	f7ff fa2c 	bl	80013e0 <HAL_GetTick>
 8001f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8c:	f7ff fa28 	bl	80013e0 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e053      	b.n	800204a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 020c 	and.w	r2, r3, #12
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d1eb      	bne.n	8001f8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b27      	ldr	r3, [pc, #156]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d210      	bcs.n	8001fe4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 0207 	bic.w	r2, r3, #7
 8001fca:	4922      	ldr	r1, [pc, #136]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e032      	b.n	800204a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4916      	ldr	r1, [pc, #88]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d009      	beq.n	8002022 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	490e      	ldr	r1, [pc, #56]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	4313      	orrs	r3, r2
 8002020:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002022:	f000 f821 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8002026:	4602      	mov	r2, r0
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	490a      	ldr	r1, [pc, #40]	; (800205c <HAL_RCC_ClockConfig+0x1c8>)
 8002034:	5ccb      	ldrb	r3, [r1, r3]
 8002036:	fa22 f303 	lsr.w	r3, r2, r3
 800203a:	4a09      	ldr	r2, [pc, #36]	; (8002060 <HAL_RCC_ClockConfig+0x1cc>)
 800203c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <HAL_RCC_ClockConfig+0x1d0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f98a 	bl	800135c <HAL_InitTick>

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40022000 	.word	0x40022000
 8002058:	40021000 	.word	0x40021000
 800205c:	080029ac 	.word	0x080029ac
 8002060:	20000038 	.word	0x20000038
 8002064:	20000054 	.word	0x20000054

08002068 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002068:	b490      	push	{r4, r7}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800206e:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002070:	1d3c      	adds	r4, r7, #4
 8002072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002074:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002078:	f240 2301 	movw	r3, #513	; 0x201
 800207c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002092:	4b22      	ldr	r3, [pc, #136]	; (800211c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d002      	beq.n	80020a8 <HAL_RCC_GetSysClockFreq+0x40>
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d003      	beq.n	80020ae <HAL_RCC_GetSysClockFreq+0x46>
 80020a6:	e02d      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a8:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020aa:	623b      	str	r3, [r7, #32]
      break;
 80020ac:	e02d      	b.n	800210a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	0c9b      	lsrs	r3, r3, #18
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ba:	4413      	add	r3, r2
 80020bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d013      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	0c5b      	lsrs	r3, r3, #17
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020da:	4413      	add	r3, r2
 80020dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e6:	fb02 f203 	mul.w	r2, r2, r3
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
 80020f2:	e004      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	623b      	str	r3, [r7, #32]
      break;
 8002102:	e002      	b.n	800210a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002106:	623b      	str	r3, [r7, #32]
      break;
 8002108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210a:	6a3b      	ldr	r3, [r7, #32]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3728      	adds	r7, #40	; 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bc90      	pop	{r4, r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	0800299c 	.word	0x0800299c
 800211c:	40021000 	.word	0x40021000
 8002120:	007a1200 	.word	0x007a1200
 8002124:	003d0900 	.word	0x003d0900

08002128 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002130:	4b0a      	ldr	r3, [pc, #40]	; (800215c <RCC_Delay+0x34>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <RCC_Delay+0x38>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0a5b      	lsrs	r3, r3, #9
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002144:	bf00      	nop
  }
  while (Delay --);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1e5a      	subs	r2, r3, #1
 800214a:	60fa      	str	r2, [r7, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f9      	bne.n	8002144 <RCC_Delay+0x1c>
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	20000038 	.word	0x20000038
 8002160:	10624dd3 	.word	0x10624dd3

08002164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e041      	b.n	80021fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe fe00 	bl	8000d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3304      	adds	r3, #4
 80021a0:	4619      	mov	r1, r3
 80021a2:	4610      	mov	r0, r2
 80021a4:	f000 fa6a 	bl	800267c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d001      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e035      	b.n	8002288 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a16      	ldr	r2, [pc, #88]	; (8002294 <HAL_TIM_Base_Start_IT+0x90>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d009      	beq.n	8002252 <HAL_TIM_Base_Start_IT+0x4e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002246:	d004      	beq.n	8002252 <HAL_TIM_Base_Start_IT+0x4e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a12      	ldr	r2, [pc, #72]	; (8002298 <HAL_TIM_Base_Start_IT+0x94>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d111      	bne.n	8002276 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b06      	cmp	r3, #6
 8002262:	d010      	beq.n	8002286 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002274:	e007      	b.n	8002286 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0201 	orr.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40012c00 	.word	0x40012c00
 8002298:	40000400 	.word	0x40000400

0800229c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d122      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d11b      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0202 	mvn.w	r2, #2
 80022c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f9b1 	bl	8002646 <HAL_TIM_IC_CaptureCallback>
 80022e4:	e005      	b.n	80022f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f9a4 	bl	8002634 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f9b3 	bl	8002658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b04      	cmp	r3, #4
 8002304:	d122      	bne.n	800234c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b04      	cmp	r3, #4
 8002312:	d11b      	bne.n	800234c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0204 	mvn.w	r2, #4
 800231c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2202      	movs	r2, #2
 8002322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f987 	bl	8002646 <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f97a 	bl	8002634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f989 	bl	8002658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b08      	cmp	r3, #8
 8002358:	d122      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b08      	cmp	r3, #8
 8002366:	d11b      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0208 	mvn.w	r2, #8
 8002370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2204      	movs	r2, #4
 8002376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f95d 	bl	8002646 <HAL_TIM_IC_CaptureCallback>
 800238c:	e005      	b.n	800239a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f950 	bl	8002634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f95f 	bl	8002658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b10      	cmp	r3, #16
 80023ac:	d122      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d11b      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0210 	mvn.w	r2, #16
 80023c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2208      	movs	r2, #8
 80023ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f933 	bl	8002646 <HAL_TIM_IC_CaptureCallback>
 80023e0:	e005      	b.n	80023ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f926 	bl	8002634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f935 	bl	8002658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d107      	bne.n	8002420 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0201 	mvn.w	r2, #1
 8002418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe fbe4 	bl	8000be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242a:	2b80      	cmp	r3, #128	; 0x80
 800242c:	d10e      	bne.n	800244c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002438:	2b80      	cmp	r3, #128	; 0x80
 800243a:	d107      	bne.n	800244c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fa67 	bl	800291a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002456:	2b40      	cmp	r3, #64	; 0x40
 8002458:	d10e      	bne.n	8002478 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	d107      	bne.n	8002478 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f8f9 	bl	800266a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b20      	cmp	r3, #32
 8002484:	d10e      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b20      	cmp	r3, #32
 8002492:	d107      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0220 	mvn.w	r2, #32
 800249c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fa32 	bl	8002908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_TIM_ConfigClockSource+0x18>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e0b3      	b.n	800262c <HAL_TIM_ConfigClockSource+0x180>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024fc:	d03e      	beq.n	800257c <HAL_TIM_ConfigClockSource+0xd0>
 80024fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002502:	f200 8087 	bhi.w	8002614 <HAL_TIM_ConfigClockSource+0x168>
 8002506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250a:	f000 8085 	beq.w	8002618 <HAL_TIM_ConfigClockSource+0x16c>
 800250e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002512:	d87f      	bhi.n	8002614 <HAL_TIM_ConfigClockSource+0x168>
 8002514:	2b70      	cmp	r3, #112	; 0x70
 8002516:	d01a      	beq.n	800254e <HAL_TIM_ConfigClockSource+0xa2>
 8002518:	2b70      	cmp	r3, #112	; 0x70
 800251a:	d87b      	bhi.n	8002614 <HAL_TIM_ConfigClockSource+0x168>
 800251c:	2b60      	cmp	r3, #96	; 0x60
 800251e:	d050      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0x116>
 8002520:	2b60      	cmp	r3, #96	; 0x60
 8002522:	d877      	bhi.n	8002614 <HAL_TIM_ConfigClockSource+0x168>
 8002524:	2b50      	cmp	r3, #80	; 0x50
 8002526:	d03c      	beq.n	80025a2 <HAL_TIM_ConfigClockSource+0xf6>
 8002528:	2b50      	cmp	r3, #80	; 0x50
 800252a:	d873      	bhi.n	8002614 <HAL_TIM_ConfigClockSource+0x168>
 800252c:	2b40      	cmp	r3, #64	; 0x40
 800252e:	d058      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x136>
 8002530:	2b40      	cmp	r3, #64	; 0x40
 8002532:	d86f      	bhi.n	8002614 <HAL_TIM_ConfigClockSource+0x168>
 8002534:	2b30      	cmp	r3, #48	; 0x30
 8002536:	d064      	beq.n	8002602 <HAL_TIM_ConfigClockSource+0x156>
 8002538:	2b30      	cmp	r3, #48	; 0x30
 800253a:	d86b      	bhi.n	8002614 <HAL_TIM_ConfigClockSource+0x168>
 800253c:	2b20      	cmp	r3, #32
 800253e:	d060      	beq.n	8002602 <HAL_TIM_ConfigClockSource+0x156>
 8002540:	2b20      	cmp	r3, #32
 8002542:	d867      	bhi.n	8002614 <HAL_TIM_ConfigClockSource+0x168>
 8002544:	2b00      	cmp	r3, #0
 8002546:	d05c      	beq.n	8002602 <HAL_TIM_ConfigClockSource+0x156>
 8002548:	2b10      	cmp	r3, #16
 800254a:	d05a      	beq.n	8002602 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800254c:	e062      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	6899      	ldr	r1, [r3, #8]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f000 f95c 	bl	800281a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002570:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	609a      	str	r2, [r3, #8]
      break;
 800257a:	e04e      	b.n	800261a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	6899      	ldr	r1, [r3, #8]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f000 f945 	bl	800281a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800259e:	609a      	str	r2, [r3, #8]
      break;
 80025a0:	e03b      	b.n	800261a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6859      	ldr	r1, [r3, #4]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	461a      	mov	r2, r3
 80025b0:	f000 f8bc 	bl	800272c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2150      	movs	r1, #80	; 0x50
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 f913 	bl	80027e6 <TIM_ITRx_SetConfig>
      break;
 80025c0:	e02b      	b.n	800261a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6859      	ldr	r1, [r3, #4]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	461a      	mov	r2, r3
 80025d0:	f000 f8da 	bl	8002788 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2160      	movs	r1, #96	; 0x60
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f903 	bl	80027e6 <TIM_ITRx_SetConfig>
      break;
 80025e0:	e01b      	b.n	800261a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	461a      	mov	r2, r3
 80025f0:	f000 f89c 	bl	800272c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2140      	movs	r1, #64	; 0x40
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f8f3 	bl	80027e6 <TIM_ITRx_SetConfig>
      break;
 8002600:	e00b      	b.n	800261a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4619      	mov	r1, r3
 800260c:	4610      	mov	r0, r2
 800260e:	f000 f8ea 	bl	80027e6 <TIM_ITRx_SetConfig>
        break;
 8002612:	e002      	b.n	800261a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002614:	bf00      	nop
 8002616:	e000      	b.n	800261a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002618:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a25      	ldr	r2, [pc, #148]	; (8002724 <TIM_Base_SetConfig+0xa8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d007      	beq.n	80026a4 <TIM_Base_SetConfig+0x28>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269a:	d003      	beq.n	80026a4 <TIM_Base_SetConfig+0x28>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a22      	ldr	r2, [pc, #136]	; (8002728 <TIM_Base_SetConfig+0xac>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d108      	bne.n	80026b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a1a      	ldr	r2, [pc, #104]	; (8002724 <TIM_Base_SetConfig+0xa8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d007      	beq.n	80026ce <TIM_Base_SetConfig+0x52>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c4:	d003      	beq.n	80026ce <TIM_Base_SetConfig+0x52>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a17      	ldr	r2, [pc, #92]	; (8002728 <TIM_Base_SetConfig+0xac>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d108      	bne.n	80026e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a07      	ldr	r2, [pc, #28]	; (8002724 <TIM_Base_SetConfig+0xa8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d103      	bne.n	8002714 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	615a      	str	r2, [r3, #20]
}
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	40012c00 	.word	0x40012c00
 8002728:	40000400 	.word	0x40000400

0800272c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	f023 0201 	bic.w	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f023 030a 	bic.w	r3, r3, #10
 8002768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	621a      	str	r2, [r3, #32]
}
 800277e:	bf00      	nop
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f023 0210 	bic.w	r2, r3, #16
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	031b      	lsls	r3, r3, #12
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	621a      	str	r2, [r3, #32]
}
 80027dc:	bf00      	nop
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	f043 0307 	orr.w	r3, r3, #7
 8002808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	609a      	str	r2, [r3, #8]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800281a:	b480      	push	{r7}
 800281c:	b087      	sub	sp, #28
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002834:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	021a      	lsls	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	431a      	orrs	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	4313      	orrs	r3, r2
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	609a      	str	r2, [r3, #8]
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800286c:	2302      	movs	r3, #2
 800286e:	e041      	b.n	80028f4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a14      	ldr	r2, [pc, #80]	; (8002900 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d009      	beq.n	80028c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028bc:	d004      	beq.n	80028c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a10      	ldr	r2, [pc, #64]	; (8002904 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d10c      	bne.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40012c00 	.word	0x40012c00
 8002904:	40000400 	.word	0x40000400

08002908 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <__libc_init_array>:
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	2600      	movs	r6, #0
 8002930:	4d0c      	ldr	r5, [pc, #48]	; (8002964 <__libc_init_array+0x38>)
 8002932:	4c0d      	ldr	r4, [pc, #52]	; (8002968 <__libc_init_array+0x3c>)
 8002934:	1b64      	subs	r4, r4, r5
 8002936:	10a4      	asrs	r4, r4, #2
 8002938:	42a6      	cmp	r6, r4
 800293a:	d109      	bne.n	8002950 <__libc_init_array+0x24>
 800293c:	f000 f822 	bl	8002984 <_init>
 8002940:	2600      	movs	r6, #0
 8002942:	4d0a      	ldr	r5, [pc, #40]	; (800296c <__libc_init_array+0x40>)
 8002944:	4c0a      	ldr	r4, [pc, #40]	; (8002970 <__libc_init_array+0x44>)
 8002946:	1b64      	subs	r4, r4, r5
 8002948:	10a4      	asrs	r4, r4, #2
 800294a:	42a6      	cmp	r6, r4
 800294c:	d105      	bne.n	800295a <__libc_init_array+0x2e>
 800294e:	bd70      	pop	{r4, r5, r6, pc}
 8002950:	f855 3b04 	ldr.w	r3, [r5], #4
 8002954:	4798      	blx	r3
 8002956:	3601      	adds	r6, #1
 8002958:	e7ee      	b.n	8002938 <__libc_init_array+0xc>
 800295a:	f855 3b04 	ldr.w	r3, [r5], #4
 800295e:	4798      	blx	r3
 8002960:	3601      	adds	r6, #1
 8002962:	e7f2      	b.n	800294a <__libc_init_array+0x1e>
 8002964:	080029bc 	.word	0x080029bc
 8002968:	080029bc 	.word	0x080029bc
 800296c:	080029bc 	.word	0x080029bc
 8002970:	080029c0 	.word	0x080029c0

08002974 <memset>:
 8002974:	4603      	mov	r3, r0
 8002976:	4402      	add	r2, r0
 8002978:	4293      	cmp	r3, r2
 800297a:	d100      	bne.n	800297e <memset+0xa>
 800297c:	4770      	bx	lr
 800297e:	f803 1b01 	strb.w	r1, [r3], #1
 8002982:	e7f9      	b.n	8002978 <memset+0x4>

08002984 <_init>:
 8002984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002986:	bf00      	nop
 8002988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800298a:	bc08      	pop	{r3}
 800298c:	469e      	mov	lr, r3
 800298e:	4770      	bx	lr

08002990 <_fini>:
 8002990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002992:	bf00      	nop
 8002994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002996:	bc08      	pop	{r3}
 8002998:	469e      	mov	lr, r3
 800299a:	4770      	bx	lr
